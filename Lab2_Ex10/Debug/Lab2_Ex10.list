
Lab2_Ex10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002930  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a80  08002a80  0002040c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a80  08002a80  0002040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a80  08002a80  0002040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a80  08002a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000040c  20000000  08002a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000040c  08002e94  0002040c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08002e94  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099f1  00000000  00000000  00020435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001976  00000000  00000000  00029e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dc2  00000000  00000000  0002ca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a414  00000000  00000000  0004384a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085271  00000000  00000000  0004dc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2ecf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002820  00000000  00000000  000d2f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000040c 	.word	0x2000040c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a24 	.word	0x08002a24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000410 	.word	0x20000410
 8000148:	08002a24 	.word	0x08002a24

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <get_bit>:



//extract a bit at position
int get_bit(uint8_t num, int position)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	6039      	str	r1, [r7, #0]
 8000166:	71fb      	strb	r3, [r7, #7]
	return (num & (1 << position)) >> position;
 8000168:	79fa      	ldrb	r2, [r7, #7]
 800016a:	2101      	movs	r1, #1
 800016c:	683b      	ldr	r3, [r7, #0]
 800016e:	fa01 f303 	lsl.w	r3, r1, r3
 8000172:	401a      	ands	r2, r3
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	fa42 f303 	asr.w	r3, r2, r3
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <set_row_off>:

//turn off all led
void set_row_off()
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 8000188:	2201      	movs	r2, #1
 800018a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018e:	4817      	ldr	r0, [pc, #92]	; (80001ec <set_row_off+0x68>)
 8000190:	f001 fc1e 	bl	80019d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019a:	4814      	ldr	r0, [pc, #80]	; (80001ec <set_row_off+0x68>)
 800019c:	f001 fc18 	bl	80019d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a6:	4811      	ldr	r0, [pc, #68]	; (80001ec <set_row_off+0x68>)
 80001a8:	f001 fc12 	bl	80019d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001b2:	480e      	ldr	r0, [pc, #56]	; (80001ec <set_row_off+0x68>)
 80001b4:	f001 fc0c 	bl	80019d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001be:	480b      	ldr	r0, [pc, #44]	; (80001ec <set_row_off+0x68>)
 80001c0:	f001 fc06 	bl	80019d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <set_row_off+0x68>)
 80001cc:	f001 fc00 	bl	80019d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d6:	4805      	ldr	r0, [pc, #20]	; (80001ec <set_row_off+0x68>)
 80001d8:	f001 fbfa 	bl	80019d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e2:	4802      	ldr	r0, [pc, #8]	; (80001ec <set_row_off+0x68>)
 80001e4:	f001 fbf4 	bl	80019d0 <HAL_GPIO_WritePin>
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <set_row_on>:
//turn a row on
void set_row_on(int num)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b07      	cmp	r3, #7
 80001fc:	d84a      	bhi.n	8000294 <set_row_on+0xa4>
 80001fe:	a201      	add	r2, pc, #4	; (adr r2, 8000204 <set_row_on+0x14>)
 8000200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000204:	08000225 	.word	0x08000225
 8000208:	08000233 	.word	0x08000233
 800020c:	08000241 	.word	0x08000241
 8000210:	0800024f 	.word	0x0800024f
 8000214:	0800025d 	.word	0x0800025d
 8000218:	0800026b 	.word	0x0800026b
 800021c:	08000279 	.word	0x08000279
 8000220:	08000287 	.word	0x08000287
	switch(num)
	{
	case 0:
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800022a:	481c      	ldr	r0, [pc, #112]	; (800029c <set_row_on+0xac>)
 800022c:	f001 fbd0 	bl	80019d0 <HAL_GPIO_WritePin>
			break;
 8000230:	e030      	b.n	8000294 <set_row_on+0xa4>
		case 1:
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000238:	4818      	ldr	r0, [pc, #96]	; (800029c <set_row_on+0xac>)
 800023a:	f001 fbc9 	bl	80019d0 <HAL_GPIO_WritePin>
			break;
 800023e:	e029      	b.n	8000294 <set_row_on+0xa4>
		case 2:
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000246:	4815      	ldr	r0, [pc, #84]	; (800029c <set_row_on+0xac>)
 8000248:	f001 fbc2 	bl	80019d0 <HAL_GPIO_WritePin>
			break;
 800024c:	e022      	b.n	8000294 <set_row_on+0xa4>
		case 3:
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000254:	4811      	ldr	r0, [pc, #68]	; (800029c <set_row_on+0xac>)
 8000256:	f001 fbbb 	bl	80019d0 <HAL_GPIO_WritePin>
			break;
 800025a:	e01b      	b.n	8000294 <set_row_on+0xa4>
		case 4:
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 0);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000262:	480e      	ldr	r0, [pc, #56]	; (800029c <set_row_on+0xac>)
 8000264:	f001 fbb4 	bl	80019d0 <HAL_GPIO_WritePin>
			break;
 8000268:	e014      	b.n	8000294 <set_row_on+0xa4>
		case 5:
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000270:	480a      	ldr	r0, [pc, #40]	; (800029c <set_row_on+0xac>)
 8000272:	f001 fbad 	bl	80019d0 <HAL_GPIO_WritePin>
			break;
 8000276:	e00d      	b.n	8000294 <set_row_on+0xa4>
		case 6:
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 0);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800027e:	4807      	ldr	r0, [pc, #28]	; (800029c <set_row_on+0xac>)
 8000280:	f001 fba6 	bl	80019d0 <HAL_GPIO_WritePin>
			break;
 8000284:	e006      	b.n	8000294 <set_row_on+0xa4>
		case 7:
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 0);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <set_row_on+0xac>)
 800028e:	f001 fb9f 	bl	80019d0 <HAL_GPIO_WritePin>
			break;
 8000292:	bf00      	nop

	}
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40010c00 	.word	0x40010c00

080002a0 <write_data>:
//pass data from buffer to a row
void write_data(int position){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b07      	cmp	r3, #7
 80002ac:	f200 8396 	bhi.w	80009dc <write_data+0x73c>
 80002b0:	a201      	add	r2, pc, #4	; (adr r2, 80002b8 <write_data+0x18>)
 80002b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b6:	bf00      	nop
 80002b8:	080002d9 	.word	0x080002d9
 80002bc:	080003b7 	.word	0x080003b7
 80002c0:	08000495 	.word	0x08000495
 80002c4:	0800057d 	.word	0x0800057d
 80002c8:	0800065b 	.word	0x0800065b
 80002cc:	08000739 	.word	0x08000739
 80002d0:	08000821 	.word	0x08000821
 80002d4:	080008ff 	.word	0x080008ff
	switch(position)
	{
	case 0:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, get_bit(buffer[0], 0));
 80002d8:	4ba6      	ldr	r3, [pc, #664]	; (8000574 <write_data+0x2d4>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff3c 	bl	800015c <get_bit>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	461a      	mov	r2, r3
 80002ea:	2104      	movs	r1, #4
 80002ec:	48a2      	ldr	r0, [pc, #648]	; (8000578 <write_data+0x2d8>)
 80002ee:	f001 fb6f 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, get_bit(buffer[0], 1));
 80002f2:	4ba0      	ldr	r3, [pc, #640]	; (8000574 <write_data+0x2d4>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2101      	movs	r1, #1
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff2f 	bl	800015c <get_bit>
 80002fe:	4603      	mov	r3, r0
 8000300:	b2db      	uxtb	r3, r3
 8000302:	461a      	mov	r2, r3
 8000304:	2108      	movs	r1, #8
 8000306:	489c      	ldr	r0, [pc, #624]	; (8000578 <write_data+0x2d8>)
 8000308:	f001 fb62 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, get_bit(buffer[0], 2));
 800030c:	4b99      	ldr	r3, [pc, #612]	; (8000574 <write_data+0x2d4>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2102      	movs	r1, #2
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff22 	bl	800015c <get_bit>
 8000318:	4603      	mov	r3, r0
 800031a:	b2db      	uxtb	r3, r3
 800031c:	461a      	mov	r2, r3
 800031e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000322:	4895      	ldr	r0, [pc, #596]	; (8000578 <write_data+0x2d8>)
 8000324:	f001 fb54 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, get_bit(buffer[0], 3));
 8000328:	4b92      	ldr	r3, [pc, #584]	; (8000574 <write_data+0x2d4>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2103      	movs	r1, #3
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff14 	bl	800015c <get_bit>
 8000334:	4603      	mov	r3, r0
 8000336:	b2db      	uxtb	r3, r3
 8000338:	461a      	mov	r2, r3
 800033a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033e:	488e      	ldr	r0, [pc, #568]	; (8000578 <write_data+0x2d8>)
 8000340:	f001 fb46 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, get_bit(buffer[0], 4));
 8000344:	4b8b      	ldr	r3, [pc, #556]	; (8000574 <write_data+0x2d4>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2104      	movs	r1, #4
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff06 	bl	800015c <get_bit>
 8000350:	4603      	mov	r3, r0
 8000352:	b2db      	uxtb	r3, r3
 8000354:	461a      	mov	r2, r3
 8000356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035a:	4887      	ldr	r0, [pc, #540]	; (8000578 <write_data+0x2d8>)
 800035c:	f001 fb38 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, get_bit(buffer[0], 5));
 8000360:	4b84      	ldr	r3, [pc, #528]	; (8000574 <write_data+0x2d4>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2105      	movs	r1, #5
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff fef8 	bl	800015c <get_bit>
 800036c:	4603      	mov	r3, r0
 800036e:	b2db      	uxtb	r3, r3
 8000370:	461a      	mov	r2, r3
 8000372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000376:	4880      	ldr	r0, [pc, #512]	; (8000578 <write_data+0x2d8>)
 8000378:	f001 fb2a 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, get_bit(buffer[0], 6));
 800037c:	4b7d      	ldr	r3, [pc, #500]	; (8000574 <write_data+0x2d4>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2106      	movs	r1, #6
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff feea 	bl	800015c <get_bit>
 8000388:	4603      	mov	r3, r0
 800038a:	b2db      	uxtb	r3, r3
 800038c:	461a      	mov	r2, r3
 800038e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000392:	4879      	ldr	r0, [pc, #484]	; (8000578 <write_data+0x2d8>)
 8000394:	f001 fb1c 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, get_bit(buffer[0], 7));
 8000398:	4b76      	ldr	r3, [pc, #472]	; (8000574 <write_data+0x2d4>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2107      	movs	r1, #7
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff fedc 	bl	800015c <get_bit>
 80003a4:	4603      	mov	r3, r0
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	461a      	mov	r2, r3
 80003aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ae:	4872      	ldr	r0, [pc, #456]	; (8000578 <write_data+0x2d8>)
 80003b0:	f001 fb0e 	bl	80019d0 <HAL_GPIO_WritePin>
		break;
 80003b4:	e313      	b.n	80009de <write_data+0x73e>
	case 1:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, get_bit(buffer[1], 0));
 80003b6:	4b6f      	ldr	r3, [pc, #444]	; (8000574 <write_data+0x2d4>)
 80003b8:	785b      	ldrb	r3, [r3, #1]
 80003ba:	2100      	movs	r1, #0
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff fecd 	bl	800015c <get_bit>
 80003c2:	4603      	mov	r3, r0
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	461a      	mov	r2, r3
 80003c8:	2104      	movs	r1, #4
 80003ca:	486b      	ldr	r0, [pc, #428]	; (8000578 <write_data+0x2d8>)
 80003cc:	f001 fb00 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, get_bit(buffer[1], 1));
 80003d0:	4b68      	ldr	r3, [pc, #416]	; (8000574 <write_data+0x2d4>)
 80003d2:	785b      	ldrb	r3, [r3, #1]
 80003d4:	2101      	movs	r1, #1
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff fec0 	bl	800015c <get_bit>
 80003dc:	4603      	mov	r3, r0
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	461a      	mov	r2, r3
 80003e2:	2108      	movs	r1, #8
 80003e4:	4864      	ldr	r0, [pc, #400]	; (8000578 <write_data+0x2d8>)
 80003e6:	f001 faf3 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, get_bit(buffer[1], 2));
 80003ea:	4b62      	ldr	r3, [pc, #392]	; (8000574 <write_data+0x2d4>)
 80003ec:	785b      	ldrb	r3, [r3, #1]
 80003ee:	2102      	movs	r1, #2
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff feb3 	bl	800015c <get_bit>
 80003f6:	4603      	mov	r3, r0
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	461a      	mov	r2, r3
 80003fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000400:	485d      	ldr	r0, [pc, #372]	; (8000578 <write_data+0x2d8>)
 8000402:	f001 fae5 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, get_bit(buffer[1], 3));
 8000406:	4b5b      	ldr	r3, [pc, #364]	; (8000574 <write_data+0x2d4>)
 8000408:	785b      	ldrb	r3, [r3, #1]
 800040a:	2103      	movs	r1, #3
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff fea5 	bl	800015c <get_bit>
 8000412:	4603      	mov	r3, r0
 8000414:	b2db      	uxtb	r3, r3
 8000416:	461a      	mov	r2, r3
 8000418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800041c:	4856      	ldr	r0, [pc, #344]	; (8000578 <write_data+0x2d8>)
 800041e:	f001 fad7 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, get_bit(buffer[1], 4));
 8000422:	4b54      	ldr	r3, [pc, #336]	; (8000574 <write_data+0x2d4>)
 8000424:	785b      	ldrb	r3, [r3, #1]
 8000426:	2104      	movs	r1, #4
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fe97 	bl	800015c <get_bit>
 800042e:	4603      	mov	r3, r0
 8000430:	b2db      	uxtb	r3, r3
 8000432:	461a      	mov	r2, r3
 8000434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000438:	484f      	ldr	r0, [pc, #316]	; (8000578 <write_data+0x2d8>)
 800043a:	f001 fac9 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, get_bit(buffer[1], 5));
 800043e:	4b4d      	ldr	r3, [pc, #308]	; (8000574 <write_data+0x2d4>)
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	2105      	movs	r1, #5
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff fe89 	bl	800015c <get_bit>
 800044a:	4603      	mov	r3, r0
 800044c:	b2db      	uxtb	r3, r3
 800044e:	461a      	mov	r2, r3
 8000450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000454:	4848      	ldr	r0, [pc, #288]	; (8000578 <write_data+0x2d8>)
 8000456:	f001 fabb 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, get_bit(buffer[1], 6));
 800045a:	4b46      	ldr	r3, [pc, #280]	; (8000574 <write_data+0x2d4>)
 800045c:	785b      	ldrb	r3, [r3, #1]
 800045e:	2106      	movs	r1, #6
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fe7b 	bl	800015c <get_bit>
 8000466:	4603      	mov	r3, r0
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000470:	4841      	ldr	r0, [pc, #260]	; (8000578 <write_data+0x2d8>)
 8000472:	f001 faad 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, get_bit(buffer[1], 7));
 8000476:	4b3f      	ldr	r3, [pc, #252]	; (8000574 <write_data+0x2d4>)
 8000478:	785b      	ldrb	r3, [r3, #1]
 800047a:	2107      	movs	r1, #7
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fe6d 	bl	800015c <get_bit>
 8000482:	4603      	mov	r3, r0
 8000484:	b2db      	uxtb	r3, r3
 8000486:	461a      	mov	r2, r3
 8000488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800048c:	483a      	ldr	r0, [pc, #232]	; (8000578 <write_data+0x2d8>)
 800048e:	f001 fa9f 	bl	80019d0 <HAL_GPIO_WritePin>
		break;
 8000492:	e2a4      	b.n	80009de <write_data+0x73e>
	case 2:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, get_bit(buffer[2], 0));
 8000494:	4b37      	ldr	r3, [pc, #220]	; (8000574 <write_data+0x2d4>)
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff fe5e 	bl	800015c <get_bit>
 80004a0:	4603      	mov	r3, r0
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	461a      	mov	r2, r3
 80004a6:	2104      	movs	r1, #4
 80004a8:	4833      	ldr	r0, [pc, #204]	; (8000578 <write_data+0x2d8>)
 80004aa:	f001 fa91 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, get_bit(buffer[2], 1));
 80004ae:	4b31      	ldr	r3, [pc, #196]	; (8000574 <write_data+0x2d4>)
 80004b0:	789b      	ldrb	r3, [r3, #2]
 80004b2:	2101      	movs	r1, #1
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff fe51 	bl	800015c <get_bit>
 80004ba:	4603      	mov	r3, r0
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	2108      	movs	r1, #8
 80004c2:	482d      	ldr	r0, [pc, #180]	; (8000578 <write_data+0x2d8>)
 80004c4:	f001 fa84 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, get_bit(buffer[2], 2));
 80004c8:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <write_data+0x2d4>)
 80004ca:	789b      	ldrb	r3, [r3, #2]
 80004cc:	2102      	movs	r1, #2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff fe44 	bl	800015c <get_bit>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	461a      	mov	r2, r3
 80004da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004de:	4826      	ldr	r0, [pc, #152]	; (8000578 <write_data+0x2d8>)
 80004e0:	f001 fa76 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, get_bit(buffer[2], 3));
 80004e4:	4b23      	ldr	r3, [pc, #140]	; (8000574 <write_data+0x2d4>)
 80004e6:	789b      	ldrb	r3, [r3, #2]
 80004e8:	2103      	movs	r1, #3
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe36 	bl	800015c <get_bit>
 80004f0:	4603      	mov	r3, r0
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	461a      	mov	r2, r3
 80004f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004fa:	481f      	ldr	r0, [pc, #124]	; (8000578 <write_data+0x2d8>)
 80004fc:	f001 fa68 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, get_bit(buffer[2], 4));
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <write_data+0x2d4>)
 8000502:	789b      	ldrb	r3, [r3, #2]
 8000504:	2104      	movs	r1, #4
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff fe28 	bl	800015c <get_bit>
 800050c:	4603      	mov	r3, r0
 800050e:	b2db      	uxtb	r3, r3
 8000510:	461a      	mov	r2, r3
 8000512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000516:	4818      	ldr	r0, [pc, #96]	; (8000578 <write_data+0x2d8>)
 8000518:	f001 fa5a 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, get_bit(buffer[2], 5));
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <write_data+0x2d4>)
 800051e:	789b      	ldrb	r3, [r3, #2]
 8000520:	2105      	movs	r1, #5
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fe1a 	bl	800015c <get_bit>
 8000528:	4603      	mov	r3, r0
 800052a:	b2db      	uxtb	r3, r3
 800052c:	461a      	mov	r2, r3
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	4811      	ldr	r0, [pc, #68]	; (8000578 <write_data+0x2d8>)
 8000534:	f001 fa4c 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, get_bit(buffer[2], 6));
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <write_data+0x2d4>)
 800053a:	789b      	ldrb	r3, [r3, #2]
 800053c:	2106      	movs	r1, #6
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fe0c 	bl	800015c <get_bit>
 8000544:	4603      	mov	r3, r0
 8000546:	b2db      	uxtb	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	480a      	ldr	r0, [pc, #40]	; (8000578 <write_data+0x2d8>)
 8000550:	f001 fa3e 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, get_bit(buffer[2], 7));
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <write_data+0x2d4>)
 8000556:	789b      	ldrb	r3, [r3, #2]
 8000558:	2107      	movs	r1, #7
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fdfe 	bl	800015c <get_bit>
 8000560:	4603      	mov	r3, r0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <write_data+0x2d8>)
 800056c:	f001 fa30 	bl	80019d0 <HAL_GPIO_WritePin>
		break;
 8000570:	e235      	b.n	80009de <write_data+0x73e>
 8000572:	bf00      	nop
 8000574:	2000045c 	.word	0x2000045c
 8000578:	40010800 	.word	0x40010800
	case 3:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, get_bit(buffer[3], 0));
 800057c:	4ba6      	ldr	r3, [pc, #664]	; (8000818 <write_data+0x578>)
 800057e:	78db      	ldrb	r3, [r3, #3]
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fdea 	bl	800015c <get_bit>
 8000588:	4603      	mov	r3, r0
 800058a:	b2db      	uxtb	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	2104      	movs	r1, #4
 8000590:	48a2      	ldr	r0, [pc, #648]	; (800081c <write_data+0x57c>)
 8000592:	f001 fa1d 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, get_bit(buffer[3], 1));
 8000596:	4ba0      	ldr	r3, [pc, #640]	; (8000818 <write_data+0x578>)
 8000598:	78db      	ldrb	r3, [r3, #3]
 800059a:	2101      	movs	r1, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fddd 	bl	800015c <get_bit>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	2108      	movs	r1, #8
 80005aa:	489c      	ldr	r0, [pc, #624]	; (800081c <write_data+0x57c>)
 80005ac:	f001 fa10 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, get_bit(buffer[3], 2));
 80005b0:	4b99      	ldr	r3, [pc, #612]	; (8000818 <write_data+0x578>)
 80005b2:	78db      	ldrb	r3, [r3, #3]
 80005b4:	2102      	movs	r1, #2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff fdd0 	bl	800015c <get_bit>
 80005bc:	4603      	mov	r3, r0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	461a      	mov	r2, r3
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	4895      	ldr	r0, [pc, #596]	; (800081c <write_data+0x57c>)
 80005c8:	f001 fa02 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, get_bit(buffer[3], 3));
 80005cc:	4b92      	ldr	r3, [pc, #584]	; (8000818 <write_data+0x578>)
 80005ce:	78db      	ldrb	r3, [r3, #3]
 80005d0:	2103      	movs	r1, #3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fdc2 	bl	800015c <get_bit>
 80005d8:	4603      	mov	r3, r0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e2:	488e      	ldr	r0, [pc, #568]	; (800081c <write_data+0x57c>)
 80005e4:	f001 f9f4 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, get_bit(buffer[3], 4));
 80005e8:	4b8b      	ldr	r3, [pc, #556]	; (8000818 <write_data+0x578>)
 80005ea:	78db      	ldrb	r3, [r3, #3]
 80005ec:	2104      	movs	r1, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fdb4 	bl	800015c <get_bit>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fe:	4887      	ldr	r0, [pc, #540]	; (800081c <write_data+0x57c>)
 8000600:	f001 f9e6 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, get_bit(buffer[3], 5));
 8000604:	4b84      	ldr	r3, [pc, #528]	; (8000818 <write_data+0x578>)
 8000606:	78db      	ldrb	r3, [r3, #3]
 8000608:	2105      	movs	r1, #5
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fda6 	bl	800015c <get_bit>
 8000610:	4603      	mov	r3, r0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4880      	ldr	r0, [pc, #512]	; (800081c <write_data+0x57c>)
 800061c:	f001 f9d8 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, get_bit(buffer[3], 6));
 8000620:	4b7d      	ldr	r3, [pc, #500]	; (8000818 <write_data+0x578>)
 8000622:	78db      	ldrb	r3, [r3, #3]
 8000624:	2106      	movs	r1, #6
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fd98 	bl	800015c <get_bit>
 800062c:	4603      	mov	r3, r0
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4879      	ldr	r0, [pc, #484]	; (800081c <write_data+0x57c>)
 8000638:	f001 f9ca 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, get_bit(buffer[3], 7));
 800063c:	4b76      	ldr	r3, [pc, #472]	; (8000818 <write_data+0x578>)
 800063e:	78db      	ldrb	r3, [r3, #3]
 8000640:	2107      	movs	r1, #7
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fd8a 	bl	800015c <get_bit>
 8000648:	4603      	mov	r3, r0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000652:	4872      	ldr	r0, [pc, #456]	; (800081c <write_data+0x57c>)
 8000654:	f001 f9bc 	bl	80019d0 <HAL_GPIO_WritePin>
		break;
 8000658:	e1c1      	b.n	80009de <write_data+0x73e>
	case 4:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, get_bit(buffer[4], 0));
 800065a:	4b6f      	ldr	r3, [pc, #444]	; (8000818 <write_data+0x578>)
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fd7b 	bl	800015c <get_bit>
 8000666:	4603      	mov	r3, r0
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	2104      	movs	r1, #4
 800066e:	486b      	ldr	r0, [pc, #428]	; (800081c <write_data+0x57c>)
 8000670:	f001 f9ae 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, get_bit(buffer[4], 1));
 8000674:	4b68      	ldr	r3, [pc, #416]	; (8000818 <write_data+0x578>)
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	2101      	movs	r1, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fd6e 	bl	800015c <get_bit>
 8000680:	4603      	mov	r3, r0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	2108      	movs	r1, #8
 8000688:	4864      	ldr	r0, [pc, #400]	; (800081c <write_data+0x57c>)
 800068a:	f001 f9a1 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, get_bit(buffer[4], 2));
 800068e:	4b62      	ldr	r3, [pc, #392]	; (8000818 <write_data+0x578>)
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fd61 	bl	800015c <get_bit>
 800069a:	4603      	mov	r3, r0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	485d      	ldr	r0, [pc, #372]	; (800081c <write_data+0x57c>)
 80006a6:	f001 f993 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, get_bit(buffer[4], 3));
 80006aa:	4b5b      	ldr	r3, [pc, #364]	; (8000818 <write_data+0x578>)
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	2103      	movs	r1, #3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd53 	bl	800015c <get_bit>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	461a      	mov	r2, r3
 80006bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c0:	4856      	ldr	r0, [pc, #344]	; (800081c <write_data+0x57c>)
 80006c2:	f001 f985 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, get_bit(buffer[4], 4));
 80006c6:	4b54      	ldr	r3, [pc, #336]	; (8000818 <write_data+0x578>)
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	2104      	movs	r1, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fd45 	bl	800015c <get_bit>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006dc:	484f      	ldr	r0, [pc, #316]	; (800081c <write_data+0x57c>)
 80006de:	f001 f977 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, get_bit(buffer[4], 5));
 80006e2:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <write_data+0x578>)
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	2105      	movs	r1, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd37 	bl	800015c <get_bit>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f8:	4848      	ldr	r0, [pc, #288]	; (800081c <write_data+0x57c>)
 80006fa:	f001 f969 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, get_bit(buffer[4], 6));
 80006fe:	4b46      	ldr	r3, [pc, #280]	; (8000818 <write_data+0x578>)
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	2106      	movs	r1, #6
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fd29 	bl	800015c <get_bit>
 800070a:	4603      	mov	r3, r0
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000714:	4841      	ldr	r0, [pc, #260]	; (800081c <write_data+0x57c>)
 8000716:	f001 f95b 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, get_bit(buffer[4], 7));
 800071a:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <write_data+0x578>)
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	2107      	movs	r1, #7
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd1b 	bl	800015c <get_bit>
 8000726:	4603      	mov	r3, r0
 8000728:	b2db      	uxtb	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000730:	483a      	ldr	r0, [pc, #232]	; (800081c <write_data+0x57c>)
 8000732:	f001 f94d 	bl	80019d0 <HAL_GPIO_WritePin>
		break;
 8000736:	e152      	b.n	80009de <write_data+0x73e>
	case 5:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, get_bit(buffer[5], 0));
 8000738:	4b37      	ldr	r3, [pc, #220]	; (8000818 <write_data+0x578>)
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fd0c 	bl	800015c <get_bit>
 8000744:	4603      	mov	r3, r0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	2104      	movs	r1, #4
 800074c:	4833      	ldr	r0, [pc, #204]	; (800081c <write_data+0x57c>)
 800074e:	f001 f93f 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, get_bit(buffer[5], 1));
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <write_data+0x578>)
 8000754:	795b      	ldrb	r3, [r3, #5]
 8000756:	2101      	movs	r1, #1
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fcff 	bl	800015c <get_bit>
 800075e:	4603      	mov	r3, r0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	461a      	mov	r2, r3
 8000764:	2108      	movs	r1, #8
 8000766:	482d      	ldr	r0, [pc, #180]	; (800081c <write_data+0x57c>)
 8000768:	f001 f932 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, get_bit(buffer[5], 2));
 800076c:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <write_data+0x578>)
 800076e:	795b      	ldrb	r3, [r3, #5]
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fcf2 	bl	800015c <get_bit>
 8000778:	4603      	mov	r3, r0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	461a      	mov	r2, r3
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	4826      	ldr	r0, [pc, #152]	; (800081c <write_data+0x57c>)
 8000784:	f001 f924 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, get_bit(buffer[5], 3));
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <write_data+0x578>)
 800078a:	795b      	ldrb	r3, [r3, #5]
 800078c:	2103      	movs	r1, #3
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fce4 	bl	800015c <get_bit>
 8000794:	4603      	mov	r3, r0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079e:	481f      	ldr	r0, [pc, #124]	; (800081c <write_data+0x57c>)
 80007a0:	f001 f916 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, get_bit(buffer[5], 4));
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <write_data+0x578>)
 80007a6:	795b      	ldrb	r3, [r3, #5]
 80007a8:	2104      	movs	r1, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fcd6 	bl	800015c <get_bit>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ba:	4818      	ldr	r0, [pc, #96]	; (800081c <write_data+0x57c>)
 80007bc:	f001 f908 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, get_bit(buffer[5], 5));
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <write_data+0x578>)
 80007c2:	795b      	ldrb	r3, [r3, #5]
 80007c4:	2105      	movs	r1, #5
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fcc8 	bl	800015c <get_bit>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <write_data+0x57c>)
 80007d8:	f001 f8fa 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, get_bit(buffer[5], 6));
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <write_data+0x578>)
 80007de:	795b      	ldrb	r3, [r3, #5]
 80007e0:	2106      	movs	r1, #6
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fcba 	bl	800015c <get_bit>
 80007e8:	4603      	mov	r3, r0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	461a      	mov	r2, r3
 80007ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f2:	480a      	ldr	r0, [pc, #40]	; (800081c <write_data+0x57c>)
 80007f4:	f001 f8ec 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, get_bit(buffer[5], 7));
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <write_data+0x578>)
 80007fa:	795b      	ldrb	r3, [r3, #5]
 80007fc:	2107      	movs	r1, #7
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fcac 	bl	800015c <get_bit>
 8000804:	4603      	mov	r3, r0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <write_data+0x57c>)
 8000810:	f001 f8de 	bl	80019d0 <HAL_GPIO_WritePin>
		break;
 8000814:	e0e3      	b.n	80009de <write_data+0x73e>
 8000816:	bf00      	nop
 8000818:	2000045c 	.word	0x2000045c
 800081c:	40010800 	.word	0x40010800
	case 6:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, get_bit(buffer[6], 0));
 8000820:	4b71      	ldr	r3, [pc, #452]	; (80009e8 <write_data+0x748>)
 8000822:	799b      	ldrb	r3, [r3, #6]
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fc98 	bl	800015c <get_bit>
 800082c:	4603      	mov	r3, r0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	2104      	movs	r1, #4
 8000834:	486d      	ldr	r0, [pc, #436]	; (80009ec <write_data+0x74c>)
 8000836:	f001 f8cb 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, get_bit(buffer[6], 1));
 800083a:	4b6b      	ldr	r3, [pc, #428]	; (80009e8 <write_data+0x748>)
 800083c:	799b      	ldrb	r3, [r3, #6]
 800083e:	2101      	movs	r1, #1
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fc8b 	bl	800015c <get_bit>
 8000846:	4603      	mov	r3, r0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	2108      	movs	r1, #8
 800084e:	4867      	ldr	r0, [pc, #412]	; (80009ec <write_data+0x74c>)
 8000850:	f001 f8be 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, get_bit(buffer[6], 2));
 8000854:	4b64      	ldr	r3, [pc, #400]	; (80009e8 <write_data+0x748>)
 8000856:	799b      	ldrb	r3, [r3, #6]
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fc7e 	bl	800015c <get_bit>
 8000860:	4603      	mov	r3, r0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086a:	4860      	ldr	r0, [pc, #384]	; (80009ec <write_data+0x74c>)
 800086c:	f001 f8b0 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, get_bit(buffer[6], 3));
 8000870:	4b5d      	ldr	r3, [pc, #372]	; (80009e8 <write_data+0x748>)
 8000872:	799b      	ldrb	r3, [r3, #6]
 8000874:	2103      	movs	r1, #3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fc70 	bl	800015c <get_bit>
 800087c:	4603      	mov	r3, r0
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000886:	4859      	ldr	r0, [pc, #356]	; (80009ec <write_data+0x74c>)
 8000888:	f001 f8a2 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, get_bit(buffer[6], 4));
 800088c:	4b56      	ldr	r3, [pc, #344]	; (80009e8 <write_data+0x748>)
 800088e:	799b      	ldrb	r3, [r3, #6]
 8000890:	2104      	movs	r1, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fc62 	bl	800015c <get_bit>
 8000898:	4603      	mov	r3, r0
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a2:	4852      	ldr	r0, [pc, #328]	; (80009ec <write_data+0x74c>)
 80008a4:	f001 f894 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, get_bit(buffer[6], 5));
 80008a8:	4b4f      	ldr	r3, [pc, #316]	; (80009e8 <write_data+0x748>)
 80008aa:	799b      	ldrb	r3, [r3, #6]
 80008ac:	2105      	movs	r1, #5
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fc54 	bl	800015c <get_bit>
 80008b4:	4603      	mov	r3, r0
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	461a      	mov	r2, r3
 80008ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008be:	484b      	ldr	r0, [pc, #300]	; (80009ec <write_data+0x74c>)
 80008c0:	f001 f886 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, get_bit(buffer[6], 6));
 80008c4:	4b48      	ldr	r3, [pc, #288]	; (80009e8 <write_data+0x748>)
 80008c6:	799b      	ldrb	r3, [r3, #6]
 80008c8:	2106      	movs	r1, #6
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fc46 	bl	800015c <get_bit>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008da:	4844      	ldr	r0, [pc, #272]	; (80009ec <write_data+0x74c>)
 80008dc:	f001 f878 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, get_bit(buffer[6], 7));
 80008e0:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <write_data+0x748>)
 80008e2:	799b      	ldrb	r3, [r3, #6]
 80008e4:	2107      	movs	r1, #7
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fc38 	bl	800015c <get_bit>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f6:	483d      	ldr	r0, [pc, #244]	; (80009ec <write_data+0x74c>)
 80008f8:	f001 f86a 	bl	80019d0 <HAL_GPIO_WritePin>
		break;
 80008fc:	e06f      	b.n	80009de <write_data+0x73e>
	case 7:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, get_bit(buffer[7], 0));
 80008fe:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <write_data+0x748>)
 8000900:	79db      	ldrb	r3, [r3, #7]
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fc29 	bl	800015c <get_bit>
 800090a:	4603      	mov	r3, r0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	2104      	movs	r1, #4
 8000912:	4836      	ldr	r0, [pc, #216]	; (80009ec <write_data+0x74c>)
 8000914:	f001 f85c 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, get_bit(buffer[7], 1));
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <write_data+0x748>)
 800091a:	79db      	ldrb	r3, [r3, #7]
 800091c:	2101      	movs	r1, #1
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fc1c 	bl	800015c <get_bit>
 8000924:	4603      	mov	r3, r0
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	2108      	movs	r1, #8
 800092c:	482f      	ldr	r0, [pc, #188]	; (80009ec <write_data+0x74c>)
 800092e:	f001 f84f 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, get_bit(buffer[7], 2));
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <write_data+0x748>)
 8000934:	79db      	ldrb	r3, [r3, #7]
 8000936:	2102      	movs	r1, #2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fc0f 	bl	800015c <get_bit>
 800093e:	4603      	mov	r3, r0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000948:	4828      	ldr	r0, [pc, #160]	; (80009ec <write_data+0x74c>)
 800094a:	f001 f841 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, get_bit(buffer[7], 3));
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <write_data+0x748>)
 8000950:	79db      	ldrb	r3, [r3, #7]
 8000952:	2103      	movs	r1, #3
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fc01 	bl	800015c <get_bit>
 800095a:	4603      	mov	r3, r0
 800095c:	b2db      	uxtb	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000964:	4821      	ldr	r0, [pc, #132]	; (80009ec <write_data+0x74c>)
 8000966:	f001 f833 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, get_bit(buffer[7], 4));
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <write_data+0x748>)
 800096c:	79db      	ldrb	r3, [r3, #7]
 800096e:	2104      	movs	r1, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fbf3 	bl	800015c <get_bit>
 8000976:	4603      	mov	r3, r0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000980:	481a      	ldr	r0, [pc, #104]	; (80009ec <write_data+0x74c>)
 8000982:	f001 f825 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, get_bit(buffer[7], 5));
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <write_data+0x748>)
 8000988:	79db      	ldrb	r3, [r3, #7]
 800098a:	2105      	movs	r1, #5
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fbe5 	bl	800015c <get_bit>
 8000992:	4603      	mov	r3, r0
 8000994:	b2db      	uxtb	r3, r3
 8000996:	461a      	mov	r2, r3
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <write_data+0x74c>)
 800099e:	f001 f817 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, get_bit(buffer[7], 6));
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <write_data+0x748>)
 80009a4:	79db      	ldrb	r3, [r3, #7]
 80009a6:	2106      	movs	r1, #6
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fbd7 	bl	800015c <get_bit>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <write_data+0x74c>)
 80009ba:	f001 f809 	bl	80019d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, get_bit(buffer[7], 7));
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <write_data+0x748>)
 80009c0:	79db      	ldrb	r3, [r3, #7]
 80009c2:	2107      	movs	r1, #7
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fbc9 	bl	800015c <get_bit>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	461a      	mov	r2, r3
 80009d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <write_data+0x74c>)
 80009d6:	f000 fffb 	bl	80019d0 <HAL_GPIO_WritePin>
		break;
 80009da:	e000      	b.n	80009de <write_data+0x73e>
	default:
		break;
 80009dc:	bf00      	nop

	}
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000045c 	.word	0x2000045c
 80009ec:	40010800 	.word	0x40010800

080009f0 <update_buffer>:

//copy code of character c to buffer
void update_buffer(char c)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	int num = (int) c;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	60bb      	str	r3, [r7, #8]
	int i;
	for(i=0;i<8;i++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e00e      	b.n	8000a22 <update_buffer+0x32>
	{
		buffer[i] = font8x8_basic[num][i];
 8000a04:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <update_buffer+0x44>)
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	441a      	add	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4413      	add	r3, r2
 8000a10:	7819      	ldrb	r1, [r3, #0]
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <update_buffer+0x48>)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	460a      	mov	r2, r1
 8000a1a:	701a      	strb	r2, [r3, #0]
	for(i=0;i<8;i++)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b07      	cmp	r3, #7
 8000a26:	dded      	ble.n	8000a04 <update_buffer+0x14>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	2000045c 	.word	0x2000045c

08000a3c <display_char>:
//display char on buffer to led
void display_char()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
	for(int i=0;i<8;i++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	e00d      	b.n	8000a64 <display_char+0x28>
	{
		set_row_off();
 8000a48:	f7ff fb9c 	bl	8000184 <set_row_off>
		write_data(i);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fc27 	bl	80002a0 <write_data>
		set_row_on(i);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fbcc 	bl	80001f0 <set_row_on>
		HAL_Delay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 fd0d 	bl	8001478 <HAL_Delay>
	for(int i=0;i<8;i++)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3301      	adds	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b07      	cmp	r3, #7
 8000a68:	ddee      	ble.n	8000a48 <display_char+0xc>
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <display_string>:

//update a character to buffer every timer3_flag on
static int idx = 0;		//update character at index to buffer
void display_string(char* str)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	int len = strlen(str);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff fb65 	bl	800014c <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	60fb      	str	r3, [r7, #12]
	if(timer3_flag == 1){
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <display_string+0x54>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d118      	bne.n	8000ac0 <display_string+0x4c>
		update_buffer(str[idx]);
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <display_string+0x58>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffa8 	bl	80009f0 <update_buffer>
		idx = (idx+1)%len;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <display_string+0x58>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	fb93 f2f2 	sdiv	r2, r3, r2
 8000aac:	68f9      	ldr	r1, [r7, #12]
 8000aae:	fb01 f202 	mul.w	r2, r1, r2
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <display_string+0x58>)
 8000ab6:	6013      	str	r3, [r2, #0]
		setTimer3(1000);
 8000ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abc:	f000 fb5a 	bl	8001174 <setTimer3>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000044c 	.word	0x2000044c
 8000acc:	20000428 	.word	0x20000428

08000ad0 <update7SEG>:
 void updateClockBuffer(int ,int);
 const int MAX_LED = 4;
 //int index_led = 0;
 int led_buffer[4] = {0, 0, 0, 0};
 //display number at led_buffer[index]
 void update7SEG(int index){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d822      	bhi.n	8000b24 <update7SEG+0x54>
 8000ade:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <update7SEG+0x14>)
 8000ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae4:	08000af5 	.word	0x08000af5
 8000ae8:	08000b01 	.word	0x08000b01
 8000aec:	08000b0d 	.word	0x08000b0d
 8000af0:	08000b19 	.word	0x08000b19
     switch (index){
         case 0:
             display7SEG(led_buffer[0]);
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <update7SEG+0x60>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fa1d 	bl	8000f38 <display7SEG>
             break;
 8000afe:	e012      	b.n	8000b26 <update7SEG+0x56>
         case 1:
         	display7SEG(led_buffer[1]);
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <update7SEG+0x60>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fa17 	bl	8000f38 <display7SEG>
             break;
 8000b0a:	e00c      	b.n	8000b26 <update7SEG+0x56>
         case 2:
         	display7SEG(led_buffer[2]);
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <update7SEG+0x60>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fa11 	bl	8000f38 <display7SEG>
             break;
 8000b16:	e006      	b.n	8000b26 <update7SEG+0x56>
         case 3:
         	display7SEG(led_buffer[3]);
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <update7SEG+0x60>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fa0b 	bl	8000f38 <display7SEG>
             break;
 8000b22:	e000      	b.n	8000b26 <update7SEG+0x56>
         default:
             break;
 8000b24:	bf00      	nop
     }
 }
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000042c 	.word	0x2000042c

08000b34 <updateClockBuffer>:
 void updateClockBuffer(int hour, int minute){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
 	led_buffer[0] = hour/10;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <updateClockBuffer+0x70>)
 8000b42:	fb82 1203 	smull	r1, r2, r2, r3
 8000b46:	1092      	asrs	r2, r2, #2
 8000b48:	17db      	asrs	r3, r3, #31
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <updateClockBuffer+0x74>)
 8000b4e:	6013      	str	r3, [r2, #0]
 	led_buffer[1] = hour%10;
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <updateClockBuffer+0x70>)
 8000b54:	fb83 2301 	smull	r2, r3, r3, r1
 8000b58:	109a      	asrs	r2, r3, #2
 8000b5a:	17cb      	asrs	r3, r1, #31
 8000b5c:	1ad2      	subs	r2, r2, r3
 8000b5e:	4613      	mov	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	1aca      	subs	r2, r1, r3
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <updateClockBuffer+0x74>)
 8000b6a:	605a      	str	r2, [r3, #4]
 	led_buffer[2] = minute/10;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <updateClockBuffer+0x70>)
 8000b70:	fb82 1203 	smull	r1, r2, r2, r3
 8000b74:	1092      	asrs	r2, r2, #2
 8000b76:	17db      	asrs	r3, r3, #31
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <updateClockBuffer+0x74>)
 8000b7c:	6093      	str	r3, [r2, #8]
 	led_buffer[3] = minute%10;
 8000b7e:	6839      	ldr	r1, [r7, #0]
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <updateClockBuffer+0x70>)
 8000b82:	fb83 2301 	smull	r2, r3, r3, r1
 8000b86:	109a      	asrs	r2, r3, #2
 8000b88:	17cb      	asrs	r3, r1, #31
 8000b8a:	1ad2      	subs	r2, r2, r3
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	1aca      	subs	r2, r1, r3
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <updateClockBuffer+0x74>)
 8000b98:	60da      	str	r2, [r3, #12]
 }
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	66666667 	.word	0x66666667
 8000ba8:	2000042c 	.word	0x2000042c

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb2:	f000 fbff 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb6:	f000 f8d7 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bba:	f000 f95d 	bl	8000e78 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bbe:	f000 f90f 	bl	8000de0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bc2:	4864      	ldr	r0, [pc, #400]	; (8000d54 <main+0x1a8>)
 8000bc4:	f001 fb6e 	bl	80022a4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int hour = 12, minute = 7, second = 3;
 8000bc8:	230c      	movs	r3, #12
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	2307      	movs	r3, #7
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	60fb      	str	r3, [r7, #12]
  setTimer1(300);		//timer1 control 2 led at DOT and clock
 8000bd4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bd8:	f000 faa0 	bl	800111c <setTimer1>
  setTimer2(500);		//timer2 control 4 seven_seg led
 8000bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be0:	f000 fab2 	bl	8001148 <setTimer2>
  int sevenSegFlag = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]

  //pick character to display
  //update_buffer('A');
  char *str = "It's not too good, but still be ok!";
 8000be8:	4b5b      	ldr	r3, [pc, #364]	; (8000d58 <main+0x1ac>)
 8000bea:	607b      	str	r3, [r7, #4]
  setTimer3(100);
 8000bec:	2064      	movs	r0, #100	; 0x64
 8000bee:	f000 fac1 	bl	8001174 <setTimer3>
  while (1)
  {
	  display_string(str);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ff3e 	bl	8000a74 <display_string>
	  display_char();
 8000bf8:	f7ff ff20 	bl	8000a3c <display_char>

	  if(timer1_flag==1){
 8000bfc:	4b57      	ldr	r3, [pc, #348]	; (8000d5c <main+0x1b0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d123      	bne.n	8000c4c <main+0xa0>
		  //toggle led every second
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8000c04:	2110      	movs	r1, #16
 8000c06:	4856      	ldr	r0, [pc, #344]	; (8000d60 <main+0x1b4>)
 8000c08:	f000 fefa 	bl	8001a00 <HAL_GPIO_TogglePin>

		  //increase clock time every second
		  second++;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
		  if (second >= 60){
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b3b      	cmp	r3, #59	; 0x3b
 8000c16:	dd04      	ble.n	8000c22 <main+0x76>
			  second = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
			  minute++;
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	613b      	str	r3, [r7, #16]
		  }
		  if(minute >= 60){
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	2b3b      	cmp	r3, #59	; 0x3b
 8000c26:	dd04      	ble.n	8000c32 <main+0x86>
			  minute = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
			  hour++;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
		  }
		  if(hour >=24){
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b17      	cmp	r3, #23
 8000c36:	dd01      	ble.n	8000c3c <main+0x90>
			  hour = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
		  }
		  updateClockBuffer(hour, minute);
 8000c3c:	6939      	ldr	r1, [r7, #16]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f7ff ff78 	bl	8000b34 <updateClockBuffer>
		  setTimer1(1000);
 8000c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c48:	f000 fa68 	bl	800111c <setTimer1>
	  }
	  if(timer2_flag==1){
 8000c4c:	4b45      	ldr	r3, [pc, #276]	; (8000d64 <main+0x1b8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d1ce      	bne.n	8000bf2 <main+0x46>
		  //update the led to display (1<=flag<=4)
		  sevenSegFlag = sevenSegFlag%4+1;
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	425a      	negs	r2, r3
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	f002 0203 	and.w	r2, r2, #3
 8000c60:	bf58      	it	pl
 8000c62:	4253      	negpl	r3, r2
 8000c64:	3301      	adds	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
		  //update7SEG take parameter from 0->3
		  //but flag is from 1->4 so we put (flag-1)
		  update7SEG(sevenSegFlag-1);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff2f 	bl	8000ad0 <update7SEG>
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d866      	bhi.n	8000d48 <main+0x19c>
 8000c7a:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <main+0xd4>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000c91 	.word	0x08000c91
 8000c84:	08000cbf 	.word	0x08000cbf
 8000c88:	08000ced 	.word	0x08000ced
 8000c8c:	08000d1b 	.word	0x08000d1b
		  //decide which led is to be displayed
		  switch(sevenSegFlag)
		  {
		  case 1:
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	4832      	ldr	r0, [pc, #200]	; (8000d60 <main+0x1b4>)
 8000c96:	f000 fe9b 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	4830      	ldr	r0, [pc, #192]	; (8000d60 <main+0x1b4>)
 8000ca0:	f000 fe96 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000caa:	482d      	ldr	r0, [pc, #180]	; (8000d60 <main+0x1b4>)
 8000cac:	f000 fe90 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb6:	482a      	ldr	r0, [pc, #168]	; (8000d60 <main+0x1b4>)
 8000cb8:	f000 fe8a 	bl	80019d0 <HAL_GPIO_WritePin>
			  break;
 8000cbc:	e044      	b.n	8000d48 <main+0x19c>
		  case 2:
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	4827      	ldr	r0, [pc, #156]	; (8000d60 <main+0x1b4>)
 8000cc4:	f000 fe84 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	4824      	ldr	r0, [pc, #144]	; (8000d60 <main+0x1b4>)
 8000cce:	f000 fe7f 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd8:	4821      	ldr	r0, [pc, #132]	; (8000d60 <main+0x1b4>)
 8000cda:	f000 fe79 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce4:	481e      	ldr	r0, [pc, #120]	; (8000d60 <main+0x1b4>)
 8000ce6:	f000 fe73 	bl	80019d0 <HAL_GPIO_WritePin>
			  break;
 8000cea:	e02d      	b.n	8000d48 <main+0x19c>
		  case 3:
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2140      	movs	r1, #64	; 0x40
 8000cf0:	481b      	ldr	r0, [pc, #108]	; (8000d60 <main+0x1b4>)
 8000cf2:	f000 fe6d 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	4819      	ldr	r0, [pc, #100]	; (8000d60 <main+0x1b4>)
 8000cfc:	f000 fe68 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d06:	4816      	ldr	r0, [pc, #88]	; (8000d60 <main+0x1b4>)
 8000d08:	f000 fe62 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d12:	4813      	ldr	r0, [pc, #76]	; (8000d60 <main+0x1b4>)
 8000d14:	f000 fe5c 	bl	80019d0 <HAL_GPIO_WritePin>
			  break;
 8000d18:	e016      	b.n	8000d48 <main+0x19c>
		  case 4:
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2140      	movs	r1, #64	; 0x40
 8000d1e:	4810      	ldr	r0, [pc, #64]	; (8000d60 <main+0x1b4>)
 8000d20:	f000 fe56 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <main+0x1b4>)
 8000d2a:	f000 fe51 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <main+0x1b4>)
 8000d36:	f000 fe4b 	bl	80019d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d40:	4807      	ldr	r0, [pc, #28]	; (8000d60 <main+0x1b4>)
 8000d42:	f000 fe45 	bl	80019d0 <HAL_GPIO_WritePin>
			  break;
 8000d46:	bf00      	nop
		  }
		  setTimer2(500);
 8000d48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d4c:	f000 f9fc 	bl	8001148 <setTimer2>
	  display_string(str);
 8000d50:	e74f      	b.n	8000bf2 <main+0x46>
 8000d52:	bf00      	nop
 8000d54:	20000464 	.word	0x20000464
 8000d58:	08002a3c 	.word	0x08002a3c
 8000d5c:	2000043c 	.word	0x2000043c
 8000d60:	40010800 	.word	0x40010800
 8000d64:	20000444 	.word	0x20000444

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b090      	sub	sp, #64	; 0x40
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	2228      	movs	r2, #40	; 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fe4c 	bl	8002a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d92:	2310      	movs	r3, #16
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0318 	add.w	r3, r7, #24
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fe48 	bl	8001a34 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000daa:	f000 f9b1 	bl	8001110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 f8b4 	bl	8001f34 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 f99d 	bl	8001110 <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3740      	adds	r7, #64	; 0x40
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e06:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e14:	2209      	movs	r2, #9
 8000e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e24:	4813      	ldr	r0, [pc, #76]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e26:	f001 f9ed 	bl	8002204 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e30:	f000 f96e 	bl	8001110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e42:	f001 fb83 	bl	800254c <HAL_TIM_ConfigClockSource>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e4c:	f000 f960 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e5e:	f001 fd4b 	bl	80028f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e68:	f000 f952 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000464 	.word	0x20000464

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_GPIO_Init+0xa0>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <MX_GPIO_Init+0xa0>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_GPIO_Init+0xa0>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_GPIO_Init+0xa0>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <MX_GPIO_Init+0xa0>)
 8000eaa:	f043 0308 	orr.w	r3, r3, #8
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_GPIO_Init+0xa0>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|RED_LED_Pin
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8000ec2:	4816      	ldr	r0, [pc, #88]	; (8000f1c <MX_GPIO_Init+0xa4>)
 8000ec4:	f000 fd84 	bl	80019d0 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|ROW2_Pin
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <MX_GPIO_Init+0xa8>)
 8000ed0:	f000 fd7e 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin RED_LED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|RED_LED_Pin
 8000ed4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000ed8:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4619      	mov	r1, r3
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <MX_GPIO_Init+0xa4>)
 8000eee:	f000 fbf5 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin d_Pin e_Pin f_Pin
                           g_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|ROW2_Pin
 8000ef2:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000ef6:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2302      	movs	r3, #2
 8000f02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_GPIO_Init+0xa8>)
 8000f0c:	f000 fbe6 	bl	80016dc <HAL_GPIO_Init>

}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010800 	.word	0x40010800
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int count= 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f2c:	f000 f938 	bl	80011a0 <timerRun>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <display7SEG>:

void display7SEG(int num)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	if(num==0 || num==2 || num==3 || num==5 || num==6
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d014      	beq.n	8000f70 <display7SEG+0x38>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d011      	beq.n	8000f70 <display7SEG+0x38>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d00e      	beq.n	8000f70 <display7SEG+0x38>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d00b      	beq.n	8000f70 <display7SEG+0x38>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d008      	beq.n	8000f70 <display7SEG+0x38>
			|| num==7 || num==8 || num==9){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b07      	cmp	r3, #7
 8000f62:	d005      	beq.n	8000f70 <display7SEG+0x38>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d002      	beq.n	8000f70 <display7SEG+0x38>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b09      	cmp	r3, #9
 8000f6e:	d105      	bne.n	8000f7c <display7SEG+0x44>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2101      	movs	r1, #1
 8000f74:	4865      	ldr	r0, [pc, #404]	; (800110c <display7SEG+0x1d4>)
 8000f76:	f000 fd2b 	bl	80019d0 <HAL_GPIO_WritePin>
 8000f7a:	e004      	b.n	8000f86 <display7SEG+0x4e>
	}
	else HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4862      	ldr	r0, [pc, #392]	; (800110c <display7SEG+0x1d4>)
 8000f82:	f000 fd25 	bl	80019d0 <HAL_GPIO_WritePin>

	if(num==0 || num==1 || num==2 || num==3 || num==4
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d014      	beq.n	8000fb6 <display7SEG+0x7e>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d011      	beq.n	8000fb6 <display7SEG+0x7e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d00e      	beq.n	8000fb6 <display7SEG+0x7e>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d00b      	beq.n	8000fb6 <display7SEG+0x7e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d008      	beq.n	8000fb6 <display7SEG+0x7e>
		|| num==7 || num==8 || num==9){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	d005      	beq.n	8000fb6 <display7SEG+0x7e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d002      	beq.n	8000fb6 <display7SEG+0x7e>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b09      	cmp	r3, #9
 8000fb4:	d105      	bne.n	8000fc2 <display7SEG+0x8a>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4854      	ldr	r0, [pc, #336]	; (800110c <display7SEG+0x1d4>)
 8000fbc:	f000 fd08 	bl	80019d0 <HAL_GPIO_WritePin>
 8000fc0:	e004      	b.n	8000fcc <display7SEG+0x94>
	}
	else HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4851      	ldr	r0, [pc, #324]	; (800110c <display7SEG+0x1d4>)
 8000fc8:	f000 fd02 	bl	80019d0 <HAL_GPIO_WritePin>

	if(num==0 || num==1 || num==3 || num==4 || num==5 || num==6
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d017      	beq.n	8001002 <display7SEG+0xca>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d014      	beq.n	8001002 <display7SEG+0xca>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d011      	beq.n	8001002 <display7SEG+0xca>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d00e      	beq.n	8001002 <display7SEG+0xca>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b05      	cmp	r3, #5
 8000fe8:	d00b      	beq.n	8001002 <display7SEG+0xca>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b06      	cmp	r3, #6
 8000fee:	d008      	beq.n	8001002 <display7SEG+0xca>
			|| num==7 || num==8 || num==9){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b07      	cmp	r3, #7
 8000ff4:	d005      	beq.n	8001002 <display7SEG+0xca>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d002      	beq.n	8001002 <display7SEG+0xca>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b09      	cmp	r3, #9
 8001000:	d105      	bne.n	800100e <display7SEG+0xd6>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2104      	movs	r1, #4
 8001006:	4841      	ldr	r0, [pc, #260]	; (800110c <display7SEG+0x1d4>)
 8001008:	f000 fce2 	bl	80019d0 <HAL_GPIO_WritePin>
 800100c:	e004      	b.n	8001018 <display7SEG+0xe0>
	}
	else HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2104      	movs	r1, #4
 8001012:	483e      	ldr	r0, [pc, #248]	; (800110c <display7SEG+0x1d4>)
 8001014:	f000 fcdc 	bl	80019d0 <HAL_GPIO_WritePin>

	if(num==0 || num==2 || num==3 || num==5 || num==6 || num==8 ||num==9){
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d011      	beq.n	8001042 <display7SEG+0x10a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d00e      	beq.n	8001042 <display7SEG+0x10a>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d00b      	beq.n	8001042 <display7SEG+0x10a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b05      	cmp	r3, #5
 800102e:	d008      	beq.n	8001042 <display7SEG+0x10a>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b06      	cmp	r3, #6
 8001034:	d005      	beq.n	8001042 <display7SEG+0x10a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b08      	cmp	r3, #8
 800103a:	d002      	beq.n	8001042 <display7SEG+0x10a>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b09      	cmp	r3, #9
 8001040:	d105      	bne.n	800104e <display7SEG+0x116>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2108      	movs	r1, #8
 8001046:	4831      	ldr	r0, [pc, #196]	; (800110c <display7SEG+0x1d4>)
 8001048:	f000 fcc2 	bl	80019d0 <HAL_GPIO_WritePin>
 800104c:	e004      	b.n	8001058 <display7SEG+0x120>
	}
	else HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2108      	movs	r1, #8
 8001052:	482e      	ldr	r0, [pc, #184]	; (800110c <display7SEG+0x1d4>)
 8001054:	f000 fcbc 	bl	80019d0 <HAL_GPIO_WritePin>

	if(num==0 || num==2 || num==6 || num==8){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <display7SEG+0x138>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d005      	beq.n	8001070 <display7SEG+0x138>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b06      	cmp	r3, #6
 8001068:	d002      	beq.n	8001070 <display7SEG+0x138>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b08      	cmp	r3, #8
 800106e:	d105      	bne.n	800107c <display7SEG+0x144>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2110      	movs	r1, #16
 8001074:	4825      	ldr	r0, [pc, #148]	; (800110c <display7SEG+0x1d4>)
 8001076:	f000 fcab 	bl	80019d0 <HAL_GPIO_WritePin>
 800107a:	e004      	b.n	8001086 <display7SEG+0x14e>
	}
	else HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2110      	movs	r1, #16
 8001080:	4822      	ldr	r0, [pc, #136]	; (800110c <display7SEG+0x1d4>)
 8001082:	f000 fca5 	bl	80019d0 <HAL_GPIO_WritePin>

	if(num==0 || num==4 || num==5 || num==6 || num==8 ||num==9){
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00e      	beq.n	80010aa <display7SEG+0x172>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b04      	cmp	r3, #4
 8001090:	d00b      	beq.n	80010aa <display7SEG+0x172>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d008      	beq.n	80010aa <display7SEG+0x172>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b06      	cmp	r3, #6
 800109c:	d005      	beq.n	80010aa <display7SEG+0x172>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d002      	beq.n	80010aa <display7SEG+0x172>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b09      	cmp	r3, #9
 80010a8:	d105      	bne.n	80010b6 <display7SEG+0x17e>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2120      	movs	r1, #32
 80010ae:	4817      	ldr	r0, [pc, #92]	; (800110c <display7SEG+0x1d4>)
 80010b0:	f000 fc8e 	bl	80019d0 <HAL_GPIO_WritePin>
 80010b4:	e004      	b.n	80010c0 <display7SEG+0x188>
	}
	else HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2120      	movs	r1, #32
 80010ba:	4814      	ldr	r0, [pc, #80]	; (800110c <display7SEG+0x1d4>)
 80010bc:	f000 fc88 	bl	80019d0 <HAL_GPIO_WritePin>

	if(num==2 || num==3 || num==4 || num==5 || num==6 || num==8 || num==9){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d011      	beq.n	80010ea <display7SEG+0x1b2>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d00e      	beq.n	80010ea <display7SEG+0x1b2>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d00b      	beq.n	80010ea <display7SEG+0x1b2>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d008      	beq.n	80010ea <display7SEG+0x1b2>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d005      	beq.n	80010ea <display7SEG+0x1b2>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d002      	beq.n	80010ea <display7SEG+0x1b2>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b09      	cmp	r3, #9
 80010e8:	d105      	bne.n	80010f6 <display7SEG+0x1be>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2140      	movs	r1, #64	; 0x40
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <display7SEG+0x1d4>)
 80010f0:	f000 fc6e 	bl	80019d0 <HAL_GPIO_WritePin>
 80010f4:	e005      	b.n	8001102 <display7SEG+0x1ca>
	}
	else HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2140      	movs	r1, #64	; 0x40
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <display7SEG+0x1d4>)
 80010fc:	f000 fc68 	bl	80019d0 <HAL_GPIO_WritePin>

}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010c00 	.word	0x40010c00

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <setTimer1>:
int timer3_counter = 0;

int timer4_flag = 0;
int timer4_counter = 0;

void setTimer1(int duration){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001124:	220a      	movs	r2, #10
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	fb93 f3f2 	sdiv	r3, r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <setTimer1+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <setTimer1+0x28>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000440 	.word	0x20000440
 8001144:	2000043c 	.word	0x2000043c

08001148 <setTimer2>:

void setTimer2(int duration){
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8001150:	220a      	movs	r2, #10
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	fb93 f3f2 	sdiv	r3, r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <setTimer2+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <setTimer2+0x28>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	20000448 	.word	0x20000448
 8001170:	20000444 	.word	0x20000444

08001174 <setTimer3>:

void setTimer3(int duration){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 800117c:	220a      	movs	r2, #10
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	fb93 f3f2 	sdiv	r3, r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <setTimer3+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <setTimer3+0x28>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000450 	.word	0x20000450
 800119c:	2000044c 	.word	0x2000044c

080011a0 <timerRun>:
void setTimer4(int duration){
	timer4_counter = duration/TIMER_CYCLE;
	timer4_flag = 0;
}

void timerRun(){
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	if(timer1_counter >0){
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <timerRun+0x8c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd0b      	ble.n	80011c4 <timerRun+0x24>
		timer1_counter--;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <timerRun+0x8c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <timerRun+0x8c>)
 80011b4:	6013      	str	r3, [r2, #0]
		if(timer1_counter <=0){
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <timerRun+0x8c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dc02      	bgt.n	80011c4 <timerRun+0x24>
			timer1_flag =1;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <timerRun+0x90>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter >0){
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <timerRun+0x94>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	dd0b      	ble.n	80011e4 <timerRun+0x44>
			timer2_counter--;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <timerRun+0x94>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <timerRun+0x94>)
 80011d4:	6013      	str	r3, [r2, #0]
			if(timer2_counter <=0){
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <timerRun+0x94>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	dc02      	bgt.n	80011e4 <timerRun+0x44>
				timer2_flag =1;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <timerRun+0x98>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer3_counter >0){
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <timerRun+0x9c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	dd0b      	ble.n	8001204 <timerRun+0x64>
			timer3_counter--;
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <timerRun+0x9c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <timerRun+0x9c>)
 80011f4:	6013      	str	r3, [r2, #0]
			if(timer3_counter <=0){
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <timerRun+0x9c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dc02      	bgt.n	8001204 <timerRun+0x64>
				timer3_flag =1;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <timerRun+0xa0>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer4_counter >0){
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <timerRun+0xa4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	dd0b      	ble.n	8001224 <timerRun+0x84>
			timer4_counter--;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <timerRun+0xa4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <timerRun+0xa4>)
 8001214:	6013      	str	r3, [r2, #0]
			if(timer4_counter <=0){
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <timerRun+0xa4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	dc02      	bgt.n	8001224 <timerRun+0x84>
				timer4_flag =1;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <timerRun+0xa8>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	20000440 	.word	0x20000440
 8001230:	2000043c 	.word	0x2000043c
 8001234:	20000448 	.word	0x20000448
 8001238:	20000444 	.word	0x20000444
 800123c:	20000450 	.word	0x20000450
 8001240:	2000044c 	.word	0x2000044c
 8001244:	20000458 	.word	0x20000458
 8001248:	20000454 	.word	0x20000454

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_MspInit+0x5c>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <HAL_MspInit+0x5c>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6193      	str	r3, [r2, #24]
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_MspInit+0x5c>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_MspInit+0x5c>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_MspInit+0x5c>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_MspInit+0x5c>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_MspInit+0x60>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_MspInit+0x60>)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010000 	.word	0x40010000

080012b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c0:	d113      	bne.n	80012ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	201c      	movs	r0, #28
 80012e0:	f000 f9c5 	bl	800166e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012e4:	201c      	movs	r0, #28
 80012e6:	f000 f9de 	bl	80016a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133e:	f000 f87f 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <TIM2_IRQHandler+0x10>)
 800134e:	f000 fff5 	bl	800233c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000464 	.word	0x20000464

0800135c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	; (80013a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	; (80013ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800138e:	f7ff ffe5 	bl	800135c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f001 fb1b 	bl	80029cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001396:	f7ff fc09 	bl	8000bac <main>
  bx lr
 800139a:	4770      	bx	lr
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 80013a4:	08002a88 	.word	0x08002a88
  ldr r2, =_sbss
 80013a8:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 80013ac:	200004b0 	.word	0x200004b0

080013b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_2_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x28>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x28>)
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f947 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	200f      	movs	r0, #15
 80013cc:	f000 f808 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff ff3c 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40022000 	.word	0x40022000

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x54>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x58>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f95f 	bl	80016c2 <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f000 f927 	bl	800166e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x5c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000400 	.word	0x20000400
 8001438:	20000408 	.word	0x20000408
 800143c:	20000404 	.word	0x20000404

08001440 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_IncTick+0x1c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_IncTick+0x20>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a03      	ldr	r2, [pc, #12]	; (8001460 <HAL_IncTick+0x20>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000408 	.word	0x20000408
 8001460:	200004ac 	.word	0x200004ac

08001464 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b02      	ldr	r3, [pc, #8]	; (8001474 <HAL_GetTick+0x10>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	200004ac 	.word	0x200004ac

08001478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff fff0 	bl	8001464 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001490:	d005      	beq.n	800149e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_Delay+0x44>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149e:	bf00      	nop
 80014a0:	f7ff ffe0 	bl	8001464 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8f7      	bhi.n	80014a0 <HAL_Delay+0x28>
  {
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000408 	.word	0x20000408

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <__NVIC_EnableIRQ+0x34>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	; (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	; (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
         );
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff90 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff2d 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff42 	bl	8001508 <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff90 	bl	80015b0 <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5f 	bl	800155c <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff35 	bl	8001524 <__NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffa2 	bl	8001614 <SysTick_Config>
 80016d0:	4603      	mov	r3, r0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b08b      	sub	sp, #44	; 0x2c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e148      	b.n	8001982 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f0:	2201      	movs	r2, #1
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	429a      	cmp	r2, r3
 800170a:	f040 8137 	bne.w	800197c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4aa3      	ldr	r2, [pc, #652]	; (80019a0 <HAL_GPIO_Init+0x2c4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d05e      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001718:	4aa1      	ldr	r2, [pc, #644]	; (80019a0 <HAL_GPIO_Init+0x2c4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d875      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800171e:	4aa1      	ldr	r2, [pc, #644]	; (80019a4 <HAL_GPIO_Init+0x2c8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d058      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001724:	4a9f      	ldr	r2, [pc, #636]	; (80019a4 <HAL_GPIO_Init+0x2c8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d86f      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800172a:	4a9f      	ldr	r2, [pc, #636]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d052      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001730:	4a9d      	ldr	r2, [pc, #628]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d869      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001736:	4a9d      	ldr	r2, [pc, #628]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d04c      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 800173c:	4a9b      	ldr	r2, [pc, #620]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d863      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001742:	4a9b      	ldr	r2, [pc, #620]	; (80019b0 <HAL_GPIO_Init+0x2d4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d046      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001748:	4a99      	ldr	r2, [pc, #612]	; (80019b0 <HAL_GPIO_Init+0x2d4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d85d      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800174e:	2b12      	cmp	r3, #18
 8001750:	d82a      	bhi.n	80017a8 <HAL_GPIO_Init+0xcc>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d859      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <HAL_GPIO_Init+0x80>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	080017d7 	.word	0x080017d7
 8001760:	080017b1 	.word	0x080017b1
 8001764:	080017c3 	.word	0x080017c3
 8001768:	08001805 	.word	0x08001805
 800176c:	0800180b 	.word	0x0800180b
 8001770:	0800180b 	.word	0x0800180b
 8001774:	0800180b 	.word	0x0800180b
 8001778:	0800180b 	.word	0x0800180b
 800177c:	0800180b 	.word	0x0800180b
 8001780:	0800180b 	.word	0x0800180b
 8001784:	0800180b 	.word	0x0800180b
 8001788:	0800180b 	.word	0x0800180b
 800178c:	0800180b 	.word	0x0800180b
 8001790:	0800180b 	.word	0x0800180b
 8001794:	0800180b 	.word	0x0800180b
 8001798:	0800180b 	.word	0x0800180b
 800179c:	0800180b 	.word	0x0800180b
 80017a0:	080017b9 	.word	0x080017b9
 80017a4:	080017cd 	.word	0x080017cd
 80017a8:	4a82      	ldr	r2, [pc, #520]	; (80019b4 <HAL_GPIO_Init+0x2d8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ae:	e02c      	b.n	800180a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	623b      	str	r3, [r7, #32]
          break;
 80017b6:	e029      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	3304      	adds	r3, #4
 80017be:	623b      	str	r3, [r7, #32]
          break;
 80017c0:	e024      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	3308      	adds	r3, #8
 80017c8:	623b      	str	r3, [r7, #32]
          break;
 80017ca:	e01f      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	330c      	adds	r3, #12
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	e01a      	b.n	800180c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017de:	2304      	movs	r3, #4
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e013      	b.n	800180c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ec:	2308      	movs	r3, #8
 80017ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	611a      	str	r2, [r3, #16]
          break;
 80017f6:	e009      	b.n	800180c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f8:	2308      	movs	r3, #8
 80017fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	615a      	str	r2, [r3, #20]
          break;
 8001802:	e003      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
          break;
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x130>
          break;
 800180a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d801      	bhi.n	8001816 <HAL_GPIO_Init+0x13a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	e001      	b.n	800181a <HAL_GPIO_Init+0x13e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3304      	adds	r3, #4
 800181a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d802      	bhi.n	8001828 <HAL_GPIO_Init+0x14c>
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x152>
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	3b08      	subs	r3, #8
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	210f      	movs	r1, #15
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	401a      	ands	r2, r3
 8001840:	6a39      	ldr	r1, [r7, #32]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	431a      	orrs	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8090 	beq.w	800197c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800185c:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a55      	ldr	r2, [pc, #340]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001874:	4a51      	ldr	r2, [pc, #324]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001880:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a49      	ldr	r2, [pc, #292]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1e0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1dc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a47      	ldr	r2, [pc, #284]	; (80019c8 <HAL_GPIO_Init+0x2ec>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1d8>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e004      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b4:	2303      	movs	r3, #3
 80018b6:	e002      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018bc:	2300      	movs	r3, #0
 80018be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c0:	f002 0203 	and.w	r2, r2, #3
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	4093      	lsls	r3, r2
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ce:	493b      	ldr	r1, [pc, #236]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018e8:	4b38      	ldr	r3, [pc, #224]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4937      	ldr	r1, [pc, #220]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	4933      	ldr	r1, [pc, #204]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001900:	4013      	ands	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001910:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	492d      	ldr	r1, [pc, #180]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	43db      	mvns	r3, r3
 8001926:	4929      	ldr	r1, [pc, #164]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001928:	4013      	ands	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	4923      	ldr	r1, [pc, #140]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	608b      	str	r3, [r1, #8]
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	43db      	mvns	r3, r3
 800194e:	491f      	ldr	r1, [pc, #124]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001950:	4013      	ands	r3, r2
 8001952:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	4919      	ldr	r1, [pc, #100]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	60cb      	str	r3, [r1, #12]
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	43db      	mvns	r3, r3
 8001976:	4915      	ldr	r1, [pc, #84]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 8001978:	4013      	ands	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	3301      	adds	r3, #1
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	f47f aeaf 	bne.w	80016f0 <HAL_GPIO_Init+0x14>
  }
}
 8001992:	bf00      	nop
 8001994:	bf00      	nop
 8001996:	372c      	adds	r7, #44	; 0x2c
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	10320000 	.word	0x10320000
 80019a4:	10310000 	.word	0x10310000
 80019a8:	10220000 	.word	0x10220000
 80019ac:	10210000 	.word	0x10210000
 80019b0:	10120000 	.word	0x10120000
 80019b4:	10110000 	.word	0x10110000
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40010800 	.word	0x40010800
 80019c4:	40010c00 	.word	0x40010c00
 80019c8:	40011000 	.word	0x40011000
 80019cc:	40010400 	.word	0x40010400

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	43d9      	mvns	r1, r3
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	400b      	ands	r3, r1
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	611a      	str	r2, [r3, #16]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e26c      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8087 	beq.w	8001b62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a54:	4b92      	ldr	r3, [pc, #584]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d00c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a60:	4b8f      	ldr	r3, [pc, #572]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d112      	bne.n	8001a92 <HAL_RCC_OscConfig+0x5e>
 8001a6c:	4b8c      	ldr	r3, [pc, #560]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a78:	d10b      	bne.n	8001a92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7a:	4b89      	ldr	r3, [pc, #548]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d06c      	beq.n	8001b60 <HAL_RCC_OscConfig+0x12c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d168      	bne.n	8001b60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e246      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x76>
 8001a9c:	4b80      	ldr	r3, [pc, #512]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a7f      	ldr	r2, [pc, #508]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	e02e      	b.n	8001b08 <HAL_RCC_OscConfig+0xd4>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0x98>
 8001ab2:	4b7b      	ldr	r3, [pc, #492]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a7a      	ldr	r2, [pc, #488]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b78      	ldr	r3, [pc, #480]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a77      	ldr	r2, [pc, #476]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e01d      	b.n	8001b08 <HAL_RCC_OscConfig+0xd4>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0xbc>
 8001ad6:	4b72      	ldr	r3, [pc, #456]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a71      	ldr	r2, [pc, #452]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a6e      	ldr	r2, [pc, #440]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0xd4>
 8001af0:	4b6b      	ldr	r3, [pc, #428]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a6a      	ldr	r2, [pc, #424]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a67      	ldr	r2, [pc, #412]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d013      	beq.n	8001b38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fca8 	bl	8001464 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fca4 	bl	8001464 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1fa      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0xe4>
 8001b36:	e014      	b.n	8001b62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fc94 	bl	8001464 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff fc90 	bl	8001464 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1e6      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x10c>
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d063      	beq.n	8001c36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00b      	beq.n	8001b92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b7a:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d11c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x18c>
 8001b86:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d116      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_RCC_OscConfig+0x176>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e1ba      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001baa:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4939      	ldr	r1, [pc, #228]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	e03a      	b.n	8001c36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc8:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff fc49 	bl	8001464 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd6:	f7ff fc45 	bl	8001464 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e19b      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4927      	ldr	r1, [pc, #156]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e015      	b.n	8001c36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0a:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fc28 	bl	8001464 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c18:	f7ff fc24 	bl	8001464 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e17a      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d03a      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d019      	beq.n	8001c7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff fc08 	bl	8001464 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff fc04 	bl	8001464 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e15a      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f000 faa6 	bl	80021c8 <RCC_Delay>
 8001c7c:	e01c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7ff fbee 	bl	8001464 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8a:	e00f      	b.n	8001cac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fbea 	bl	8001464 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d908      	bls.n	8001cac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e140      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	42420000 	.word	0x42420000
 8001ca8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	4b9e      	ldr	r3, [pc, #632]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e9      	bne.n	8001c8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80a6 	beq.w	8001e12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cca:	4b97      	ldr	r3, [pc, #604]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10d      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	4b94      	ldr	r3, [pc, #592]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a93      	ldr	r2, [pc, #588]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	61d3      	str	r3, [r2, #28]
 8001ce2:	4b91      	ldr	r3, [pc, #580]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b8e      	ldr	r3, [pc, #568]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d118      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b8b      	ldr	r3, [pc, #556]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a8a      	ldr	r2, [pc, #552]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fbab 	bl	8001464 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7ff fba7 	bl	8001464 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b64      	cmp	r3, #100	; 0x64
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e0fd      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b81      	ldr	r3, [pc, #516]	; (8001f2c <HAL_RCC_OscConfig+0x4f8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x312>
 8001d38:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a7a      	ldr	r2, [pc, #488]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6213      	str	r3, [r2, #32]
 8001d44:	e02d      	b.n	8001da2 <HAL_RCC_OscConfig+0x36e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x334>
 8001d4e:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4a75      	ldr	r2, [pc, #468]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6213      	str	r3, [r2, #32]
 8001d5a:	4b73      	ldr	r3, [pc, #460]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a72      	ldr	r2, [pc, #456]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 0304 	bic.w	r3, r3, #4
 8001d64:	6213      	str	r3, [r2, #32]
 8001d66:	e01c      	b.n	8001da2 <HAL_RCC_OscConfig+0x36e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d10c      	bne.n	8001d8a <HAL_RCC_OscConfig+0x356>
 8001d70:	4b6d      	ldr	r3, [pc, #436]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a6c      	ldr	r2, [pc, #432]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a69      	ldr	r2, [pc, #420]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	e00b      	b.n	8001da2 <HAL_RCC_OscConfig+0x36e>
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a66      	ldr	r2, [pc, #408]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	4b64      	ldr	r3, [pc, #400]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a63      	ldr	r2, [pc, #396]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d015      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff fb5b 	bl	8001464 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff fb57 	bl	8001464 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0ab      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc8:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0ee      	beq.n	8001db2 <HAL_RCC_OscConfig+0x37e>
 8001dd4:	e014      	b.n	8001e00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fb45 	bl	8001464 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7ff fb41 	bl	8001464 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e095      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df4:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1ee      	bne.n	8001dde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d105      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e06:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a47      	ldr	r2, [pc, #284]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8081 	beq.w	8001f1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e1c:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d061      	beq.n	8001eec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d146      	bne.n	8001ebe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e30:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <HAL_RCC_OscConfig+0x4fc>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7ff fb15 	bl	8001464 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff fb11 	bl	8001464 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e067      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e50:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e64:	d108      	bne.n	8001e78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e66:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	492d      	ldr	r1, [pc, #180]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e78:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a19      	ldr	r1, [r3, #32]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	4927      	ldr	r1, [pc, #156]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x4fc>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff fae5 	bl	8001464 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff fae1 	bl	8001464 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e037      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x46a>
 8001ebc:	e02f      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_RCC_OscConfig+0x4fc>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff face 	bl	8001464 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff faca 	bl	8001464 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e020      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x498>
 8001eea:	e018      	b.n	8001f1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e013      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	42420060 	.word	0x42420060

08001f34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0d0      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d910      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b67      	ldr	r3, [pc, #412]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 0207 	bic.w	r2, r3, #7
 8001f5e:	4965      	ldr	r1, [pc, #404]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0b8      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d020      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f90:	4b59      	ldr	r3, [pc, #356]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a58      	ldr	r2, [pc, #352]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa8:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a52      	ldr	r2, [pc, #328]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	494d      	ldr	r1, [pc, #308]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d040      	beq.n	8002054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d115      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e07f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e073      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e06b      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002012:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f023 0203 	bic.w	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4936      	ldr	r1, [pc, #216]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002024:	f7ff fa1e 	bl	8001464 <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7ff fa1a 	bl	8001464 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e053      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 020c 	and.w	r2, r3, #12
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d1eb      	bne.n	800202c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d210      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	4922      	ldr	r1, [pc, #136]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e032      	b.n	80020ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4916      	ldr	r1, [pc, #88]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	490e      	ldr	r1, [pc, #56]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020c2:	f000 f821 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	490a      	ldr	r1, [pc, #40]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 80020d4:	5ccb      	ldrb	r3, [r1, r3]
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x1cc>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1d0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f97c 	bl	80013e0 <HAL_InitTick>

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40022000 	.word	0x40022000
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08002a70 	.word	0x08002a70
 8002100:	20000400 	.word	0x20000400
 8002104:	20000404 	.word	0x20000404

08002108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002108:	b490      	push	{r4, r7}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002110:	1d3c      	adds	r4, r7, #4
 8002112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002118:	f240 2301 	movw	r3, #513	; 0x201
 800211c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b04      	cmp	r3, #4
 8002140:	d002      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x40>
 8002142:	2b08      	cmp	r3, #8
 8002144:	d003      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x46>
 8002146:	e02d      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800214a:	623b      	str	r3, [r7, #32]
      break;
 800214c:	e02d      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800215a:	4413      	add	r3, r2
 800215c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002160:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	0c5b      	lsrs	r3, r3, #17
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800217a:	4413      	add	r3, r2
 800217c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002180:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002186:	fb02 f203 	mul.w	r2, r2, r3
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	e004      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002198:	fb02 f303 	mul.w	r3, r2, r3
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	623b      	str	r3, [r7, #32]
      break;
 80021a2:	e002      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a6:	623b      	str	r3, [r7, #32]
      break;
 80021a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021aa:	6a3b      	ldr	r3, [r7, #32]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc90      	pop	{r4, r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	08002a60 	.word	0x08002a60
 80021bc:	40021000 	.word	0x40021000
 80021c0:	007a1200 	.word	0x007a1200
 80021c4:	003d0900 	.word	0x003d0900

080021c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <RCC_Delay+0x34>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <RCC_Delay+0x38>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0a5b      	lsrs	r3, r3, #9
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021e4:	bf00      	nop
  }
  while (Delay --);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	60fa      	str	r2, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f9      	bne.n	80021e4 <RCC_Delay+0x1c>
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	20000400 	.word	0x20000400
 8002200:	10624dd3 	.word	0x10624dd3

08002204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e041      	b.n	800229a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff f840 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3304      	adds	r3, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f000 fa6a 	bl	800271c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d001      	beq.n	80022bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e035      	b.n	8002328 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_TIM_Base_Start_IT+0x90>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d009      	beq.n	80022f2 <HAL_TIM_Base_Start_IT+0x4e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e6:	d004      	beq.n	80022f2 <HAL_TIM_Base_Start_IT+0x4e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_TIM_Base_Start_IT+0x94>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d111      	bne.n	8002316 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b06      	cmp	r3, #6
 8002302:	d010      	beq.n	8002326 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002314:	e007      	b.n	8002326 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40000400 	.word	0x40000400

0800233c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d122      	bne.n	8002398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b02      	cmp	r3, #2
 800235e:	d11b      	bne.n	8002398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0202 	mvn.w	r2, #2
 8002368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f9b1 	bl	80026e6 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f9a4 	bl	80026d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f9b3 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d122      	bne.n	80023ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d11b      	bne.n	80023ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0204 	mvn.w	r2, #4
 80023bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f987 	bl	80026e6 <HAL_TIM_IC_CaptureCallback>
 80023d8:	e005      	b.n	80023e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f97a 	bl	80026d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f989 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d122      	bne.n	8002440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b08      	cmp	r3, #8
 8002406:	d11b      	bne.n	8002440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0208 	mvn.w	r2, #8
 8002410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2204      	movs	r2, #4
 8002416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f95d 	bl	80026e6 <HAL_TIM_IC_CaptureCallback>
 800242c:	e005      	b.n	800243a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f950 	bl	80026d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f95f 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b10      	cmp	r3, #16
 800244c:	d122      	bne.n	8002494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b10      	cmp	r3, #16
 800245a:	d11b      	bne.n	8002494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0210 	mvn.w	r2, #16
 8002464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2208      	movs	r2, #8
 800246a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f933 	bl	80026e6 <HAL_TIM_IC_CaptureCallback>
 8002480:	e005      	b.n	800248e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f926 	bl	80026d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f935 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0201 	mvn.w	r2, #1
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe fd32 	bl	8000f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	2b80      	cmp	r3, #128	; 0x80
 80024cc:	d10e      	bne.n	80024ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	2b80      	cmp	r3, #128	; 0x80
 80024da:	d107      	bne.n	80024ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fa67 	bl	80029ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d10e      	bne.n	8002518 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002504:	2b40      	cmp	r3, #64	; 0x40
 8002506:	d107      	bne.n	8002518 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f8f9 	bl	800270a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b20      	cmp	r3, #32
 8002524:	d10e      	bne.n	8002544 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b20      	cmp	r3, #32
 8002532:	d107      	bne.n	8002544 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0220 	mvn.w	r2, #32
 800253c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fa32 	bl	80029a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_TIM_ConfigClockSource+0x18>
 8002560:	2302      	movs	r3, #2
 8002562:	e0b3      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x180>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002582:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800258a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259c:	d03e      	beq.n	800261c <HAL_TIM_ConfigClockSource+0xd0>
 800259e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a2:	f200 8087 	bhi.w	80026b4 <HAL_TIM_ConfigClockSource+0x168>
 80025a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025aa:	f000 8085 	beq.w	80026b8 <HAL_TIM_ConfigClockSource+0x16c>
 80025ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b2:	d87f      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x168>
 80025b4:	2b70      	cmp	r3, #112	; 0x70
 80025b6:	d01a      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0xa2>
 80025b8:	2b70      	cmp	r3, #112	; 0x70
 80025ba:	d87b      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x168>
 80025bc:	2b60      	cmp	r3, #96	; 0x60
 80025be:	d050      	beq.n	8002662 <HAL_TIM_ConfigClockSource+0x116>
 80025c0:	2b60      	cmp	r3, #96	; 0x60
 80025c2:	d877      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x168>
 80025c4:	2b50      	cmp	r3, #80	; 0x50
 80025c6:	d03c      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0xf6>
 80025c8:	2b50      	cmp	r3, #80	; 0x50
 80025ca:	d873      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x168>
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d058      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x136>
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d86f      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x168>
 80025d4:	2b30      	cmp	r3, #48	; 0x30
 80025d6:	d064      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x156>
 80025d8:	2b30      	cmp	r3, #48	; 0x30
 80025da:	d86b      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x168>
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d060      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x156>
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d867      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x168>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d05c      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x156>
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d05a      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025ec:	e062      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f000 f95c 	bl	80028ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002610:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	609a      	str	r2, [r3, #8]
      break;
 800261a:	e04e      	b.n	80026ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	6899      	ldr	r1, [r3, #8]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f000 f945 	bl	80028ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800263e:	609a      	str	r2, [r3, #8]
      break;
 8002640:	e03b      	b.n	80026ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	461a      	mov	r2, r3
 8002650:	f000 f8bc 	bl	80027cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2150      	movs	r1, #80	; 0x50
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f913 	bl	8002886 <TIM_ITRx_SetConfig>
      break;
 8002660:	e02b      	b.n	80026ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	461a      	mov	r2, r3
 8002670:	f000 f8da 	bl	8002828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2160      	movs	r1, #96	; 0x60
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f903 	bl	8002886 <TIM_ITRx_SetConfig>
      break;
 8002680:	e01b      	b.n	80026ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	461a      	mov	r2, r3
 8002690:	f000 f89c 	bl	80027cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f8f3 	bl	8002886 <TIM_ITRx_SetConfig>
      break;
 80026a0:	e00b      	b.n	80026ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f000 f8ea 	bl	8002886 <TIM_ITRx_SetConfig>
        break;
 80026b2:	e002      	b.n	80026ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026b4:	bf00      	nop
 80026b6:	e000      	b.n	80026ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a25      	ldr	r2, [pc, #148]	; (80027c4 <TIM_Base_SetConfig+0xa8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d007      	beq.n	8002744 <TIM_Base_SetConfig+0x28>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d003      	beq.n	8002744 <TIM_Base_SetConfig+0x28>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <TIM_Base_SetConfig+0xac>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d108      	bne.n	8002756 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <TIM_Base_SetConfig+0xa8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <TIM_Base_SetConfig+0x52>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0x52>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <TIM_Base_SetConfig+0xac>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <TIM_Base_SetConfig+0xa8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d103      	bne.n	80027b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	615a      	str	r2, [r3, #20]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40000400 	.word	0x40000400

080027cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f023 0201 	bic.w	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f023 030a 	bic.w	r3, r3, #10
 8002808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	621a      	str	r2, [r3, #32]
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f023 0210 	bic.w	r2, r3, #16
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002852:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002864:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	621a      	str	r2, [r3, #32]
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f043 0307 	orr.w	r3, r3, #7
 80028a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b087      	sub	sp, #28
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	021a      	lsls	r2, r3, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	431a      	orrs	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	609a      	str	r2, [r3, #8]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800290c:	2302      	movs	r3, #2
 800290e:	e041      	b.n	8002994 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a14      	ldr	r2, [pc, #80]	; (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d009      	beq.n	8002968 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d004      	beq.n	8002968 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d10c      	bne.n	8002982 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800296e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	4313      	orrs	r3, r2
 8002978:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400

080029a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <__libc_init_array>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	2600      	movs	r6, #0
 80029d0:	4d0c      	ldr	r5, [pc, #48]	; (8002a04 <__libc_init_array+0x38>)
 80029d2:	4c0d      	ldr	r4, [pc, #52]	; (8002a08 <__libc_init_array+0x3c>)
 80029d4:	1b64      	subs	r4, r4, r5
 80029d6:	10a4      	asrs	r4, r4, #2
 80029d8:	42a6      	cmp	r6, r4
 80029da:	d109      	bne.n	80029f0 <__libc_init_array+0x24>
 80029dc:	f000 f822 	bl	8002a24 <_init>
 80029e0:	2600      	movs	r6, #0
 80029e2:	4d0a      	ldr	r5, [pc, #40]	; (8002a0c <__libc_init_array+0x40>)
 80029e4:	4c0a      	ldr	r4, [pc, #40]	; (8002a10 <__libc_init_array+0x44>)
 80029e6:	1b64      	subs	r4, r4, r5
 80029e8:	10a4      	asrs	r4, r4, #2
 80029ea:	42a6      	cmp	r6, r4
 80029ec:	d105      	bne.n	80029fa <__libc_init_array+0x2e>
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f4:	4798      	blx	r3
 80029f6:	3601      	adds	r6, #1
 80029f8:	e7ee      	b.n	80029d8 <__libc_init_array+0xc>
 80029fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029fe:	4798      	blx	r3
 8002a00:	3601      	adds	r6, #1
 8002a02:	e7f2      	b.n	80029ea <__libc_init_array+0x1e>
 8002a04:	08002a80 	.word	0x08002a80
 8002a08:	08002a80 	.word	0x08002a80
 8002a0c:	08002a80 	.word	0x08002a80
 8002a10:	08002a84 	.word	0x08002a84

08002a14 <memset>:
 8002a14:	4603      	mov	r3, r0
 8002a16:	4402      	add	r2, r0
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d100      	bne.n	8002a1e <memset+0xa>
 8002a1c:	4770      	bx	lr
 8002a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a22:	e7f9      	b.n	8002a18 <memset+0x4>

08002a24 <_init>:
 8002a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a26:	bf00      	nop
 8002a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a2a:	bc08      	pop	{r3}
 8002a2c:	469e      	mov	lr, r3
 8002a2e:	4770      	bx	lr

08002a30 <_fini>:
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	bf00      	nop
 8002a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a36:	bc08      	pop	{r3}
 8002a38:	469e      	mov	lr, r3
 8002a3a:	4770      	bx	lr

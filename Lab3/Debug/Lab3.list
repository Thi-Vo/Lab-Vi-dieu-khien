
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b34  08002b34  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002b34  08002b34  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b34  08002b34  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000024  08002b60  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002b60  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b86  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7a  00000000  00000000  00029bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002c1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c85  00000000  00000000  0002cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd6f  00000000  00000000  000437f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082271  00000000  00000000  0004f564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d17d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c0  00000000  00000000  000d1828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002afc 	.word	0x08002afc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002afc 	.word	0x08002afc

0800014c <fsm_run>:
//	8. YELLOW_ADJUST: display mode = 3, others are the same as above
//	9. GREEN_ADJUST: display mode = 4, others are the same as above
//***********//

void fsm_run()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(state)
 8000150:	4bb4      	ldr	r3, [pc, #720]	; (8000424 <fsm_run+0x2d8>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b0d      	cmp	r3, #13
 8000156:	f200 822e 	bhi.w	80005b6 <fsm_run+0x46a>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000199 	.word	0x08000199
 8000164:	08000223 	.word	0x08000223
 8000168:	08000283 	.word	0x08000283
 800016c:	080002e3 	.word	0x080002e3
 8000170:	08000365 	.word	0x08000365
 8000174:	080003c5 	.word	0x080003c5
 8000178:	080005b7 	.word	0x080005b7
 800017c:	080005b7 	.word	0x080005b7
 8000180:	080005b7 	.word	0x080005b7
 8000184:	080005b7 	.word	0x080005b7
 8000188:	080005b7 	.word	0x080005b7
 800018c:	08000535 	.word	0x08000535
 8000190:	08000441 	.word	0x08000441
 8000194:	080004c5 	.word	0x080004c5
	{
	case INIT:
		if(yellow_time + green_time > red_time){
 8000198:	4ba3      	ldr	r3, [pc, #652]	; (8000428 <fsm_run+0x2dc>)
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	4ba3      	ldr	r3, [pc, #652]	; (800042c <fsm_run+0x2e0>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	441a      	add	r2, r3
 80001a2:	4ba3      	ldr	r3, [pc, #652]	; (8000430 <fsm_run+0x2e4>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	429a      	cmp	r2, r3
 80001a8:	d91c      	bls.n	80001e4 <fsm_run+0x98>
			//error state
			update_buffer_when_error();
 80001aa:	f000 fdd5 	bl	8000d58 <update_buffer_when_error>
			turn_all_led_on();
 80001ae:	f000 fea1 	bl	8000ef4 <turn_all_led_on>
			sevenSegAuto();
 80001b2:	f000 fcef 	bl	8000b94 <sevenSegAuto>

			//trap here until mode_button is pressed
			//and go to RED_ADJUST mode to change value again
			if(is_mode_select_button_pressed()){
 80001b6:	f000 fae1 	bl	800077c <is_mode_select_button_pressed>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	f000 81fc 	beq.w	80005ba <fsm_run+0x46e>
				state = RED_ADJUST;
 80001c2:	4b98      	ldr	r3, [pc, #608]	; (8000424 <fsm_run+0x2d8>)
 80001c4:	220b      	movs	r2, #11
 80001c6:	701a      	strb	r2, [r3, #0]
				update_buffer_manual(2, temp_red_time);
 80001c8:	4b9a      	ldr	r3, [pc, #616]	; (8000434 <fsm_run+0x2e8>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4619      	mov	r1, r3
 80001ce:	2002      	movs	r0, #2
 80001d0:	f000 fe5c 	bl	8000e8c <update_buffer_manual>
				setTimer5(250);
 80001d4:	20fa      	movs	r0, #250	; 0xfa
 80001d6:	f001 f8b3 	bl	8001340 <setTimer5>
				//reset all button flag
				is_set_button_pressed();
 80001da:	f000 fb05 	bl	80007e8 <is_set_button_pressed>
				is_time_adjust_button_pressed();
 80001de:	f000 fadf 	bl	80007a0 <is_time_adjust_button_pressed>
			}
			break;
 80001e2:	e1ea      	b.n	80005ba <fsm_run+0x46e>
		}
		//no error, prepare for changing to S1
		setTimer1(green_time);
 80001e4:	4b91      	ldr	r3, [pc, #580]	; (800042c <fsm_run+0x2e0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 f849 	bl	8001280 <setTimer1>
		setTimer2(red_time);
 80001ee:	4b90      	ldr	r3, [pc, #576]	; (8000430 <fsm_run+0x2e4>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 f85c 	bl	80012b0 <setTimer2>

		set_road1_buffer(green_time);
 80001f8:	4b8c      	ldr	r3, [pc, #560]	; (800042c <fsm_run+0x2e0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fc75 	bl	8000aec <set_road1_buffer>
		set_road2_buffer(red_time);
 8000202:	4b8b      	ldr	r3, [pc, #556]	; (8000430 <fsm_run+0x2e4>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fc9a 	bl	8000b40 <set_road2_buffer>

		setTimer3(SCANNING_TIME);
 800020c:	20fa      	movs	r0, #250	; 0xfa
 800020e:	f001 f867 	bl	80012e0 <setTimer3>
		setTimer4(1000);
 8000212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000216:	f001 f87b 	bl	8001310 <setTimer4>

		state = S1;
 800021a:	4b82      	ldr	r3, [pc, #520]	; (8000424 <fsm_run+0x2d8>)
 800021c:	2201      	movs	r2, #1
 800021e:	701a      	strb	r2, [r3, #0]
		break;
 8000220:	e1dc      	b.n	80005dc <fsm_run+0x490>
	case S1:
		green1_on();
 8000222:	f000 faf3 	bl	800080c <green1_on>
		red2_on();
 8000226:	f000 fb49 	bl	80008bc <red2_on>
		sevenSegAuto();
 800022a:	f000 fcb3 	bl	8000b94 <sevenSegAuto>
		updateBufferAuto();
 800022e:	f000 fd59 	bl	8000ce4 <updateBufferAuto>

		//road1 timeout -> turn to S2
		if(timer1_flag == 1){
 8000232:	4b81      	ldr	r3, [pc, #516]	; (8000438 <fsm_run+0x2ec>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d10c      	bne.n	8000254 <fsm_run+0x108>
			setTimer1(yellow_time);
 800023a:	4b7b      	ldr	r3, [pc, #492]	; (8000428 <fsm_run+0x2dc>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4618      	mov	r0, r3
 8000240:	f001 f81e 	bl	8001280 <setTimer1>
			set_road1_buffer(yellow_time);
 8000244:	4b78      	ldr	r3, [pc, #480]	; (8000428 <fsm_run+0x2dc>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fc4f 	bl	8000aec <set_road1_buffer>
			state = S2;
 800024e:	4b75      	ldr	r3, [pc, #468]	; (8000424 <fsm_run+0x2d8>)
 8000250:	2202      	movs	r2, #2
 8000252:	701a      	strb	r2, [r3, #0]
		}

		//Mode_button is pressed -> turn to RED_ADJUST
		if(is_mode_select_button_pressed()){
 8000254:	f000 fa92 	bl	800077c <is_mode_select_button_pressed>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	f000 81af 	beq.w	80005be <fsm_run+0x472>
			state = RED_ADJUST;
 8000260:	4b70      	ldr	r3, [pc, #448]	; (8000424 <fsm_run+0x2d8>)
 8000262:	220b      	movs	r2, #11
 8000264:	701a      	strb	r2, [r3, #0]
			update_buffer_manual(2, temp_red_time);
 8000266:	4b73      	ldr	r3, [pc, #460]	; (8000434 <fsm_run+0x2e8>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4619      	mov	r1, r3
 800026c:	2002      	movs	r0, #2
 800026e:	f000 fe0d 	bl	8000e8c <update_buffer_manual>
			setTimer5(250);
 8000272:	20fa      	movs	r0, #250	; 0xfa
 8000274:	f001 f864 	bl	8001340 <setTimer5>
			//reset all button flag
			is_time_adjust_button_pressed();
 8000278:	f000 fa92 	bl	80007a0 <is_time_adjust_button_pressed>
			is_set_button_pressed();
 800027c:	f000 fab4 	bl	80007e8 <is_set_button_pressed>
		}
		break;
 8000280:	e19d      	b.n	80005be <fsm_run+0x472>
	case S2:
		yellow1_on();
 8000282:	f000 faef 	bl	8000864 <yellow1_on>
		red2_on();
 8000286:	f000 fb19 	bl	80008bc <red2_on>
		sevenSegAuto();
 800028a:	f000 fc83 	bl	8000b94 <sevenSegAuto>
		updateBufferAuto();
 800028e:	f000 fd29 	bl	8000ce4 <updateBufferAuto>

		//road1 timeout -> turn to S3
		if(timer1_flag == 1){
 8000292:	4b69      	ldr	r3, [pc, #420]	; (8000438 <fsm_run+0x2ec>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d10c      	bne.n	80002b4 <fsm_run+0x168>
			setTimer1(red_time);
 800029a:	4b65      	ldr	r3, [pc, #404]	; (8000430 <fsm_run+0x2e4>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 ffee 	bl	8001280 <setTimer1>
			set_road1_buffer(red_time);
 80002a4:	4b62      	ldr	r3, [pc, #392]	; (8000430 <fsm_run+0x2e4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fc1f 	bl	8000aec <set_road1_buffer>
			state = S3;
 80002ae:	4b5d      	ldr	r3, [pc, #372]	; (8000424 <fsm_run+0x2d8>)
 80002b0:	2203      	movs	r2, #3
 80002b2:	701a      	strb	r2, [r3, #0]
		}

		//Mode_button is pressed -> turn to RED_ADJUST
		if(is_mode_select_button_pressed()){
 80002b4:	f000 fa62 	bl	800077c <is_mode_select_button_pressed>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f000 8181 	beq.w	80005c2 <fsm_run+0x476>
			state = RED_ADJUST;
 80002c0:	4b58      	ldr	r3, [pc, #352]	; (8000424 <fsm_run+0x2d8>)
 80002c2:	220b      	movs	r2, #11
 80002c4:	701a      	strb	r2, [r3, #0]
			update_buffer_manual(2, temp_red_time);
 80002c6:	4b5b      	ldr	r3, [pc, #364]	; (8000434 <fsm_run+0x2e8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4619      	mov	r1, r3
 80002cc:	2002      	movs	r0, #2
 80002ce:	f000 fddd 	bl	8000e8c <update_buffer_manual>
			setTimer5(250);
 80002d2:	20fa      	movs	r0, #250	; 0xfa
 80002d4:	f001 f834 	bl	8001340 <setTimer5>
			//reset all button flag
			is_time_adjust_button_pressed();
 80002d8:	f000 fa62 	bl	80007a0 <is_time_adjust_button_pressed>
			is_set_button_pressed();
 80002dc:	f000 fa84 	bl	80007e8 <is_set_button_pressed>
		}
		break;
 80002e0:	e16f      	b.n	80005c2 <fsm_run+0x476>
	case S3:
		red1_on();
 80002e2:	f000 faa9 	bl	8000838 <red1_on>
		red2_on();
 80002e6:	f000 fae9 	bl	80008bc <red2_on>
		sevenSegAuto();
 80002ea:	f000 fc53 	bl	8000b94 <sevenSegAuto>
		updateBufferAuto();
 80002ee:	f000 fcf9 	bl	8000ce4 <updateBufferAuto>

		//road1 timeout -> turn to S1
		if(timer1_flag == 1){
 80002f2:	4b51      	ldr	r3, [pc, #324]	; (8000438 <fsm_run+0x2ec>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d10c      	bne.n	8000314 <fsm_run+0x1c8>
			setTimer1(green_time);
 80002fa:	4b4c      	ldr	r3, [pc, #304]	; (800042c <fsm_run+0x2e0>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 ffbe 	bl	8001280 <setTimer1>
			set_road1_buffer(green_time);
 8000304:	4b49      	ldr	r3, [pc, #292]	; (800042c <fsm_run+0x2e0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fbef 	bl	8000aec <set_road1_buffer>
			state = S1;
 800030e:	4b45      	ldr	r3, [pc, #276]	; (8000424 <fsm_run+0x2d8>)
 8000310:	2201      	movs	r2, #1
 8000312:	701a      	strb	r2, [r3, #0]
		}
		//road2 timeout -> turn to S4
		if(timer2_flag == 1){
 8000314:	4b49      	ldr	r3, [pc, #292]	; (800043c <fsm_run+0x2f0>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d10c      	bne.n	8000336 <fsm_run+0x1ea>
			setTimer2(green_time);
 800031c:	4b43      	ldr	r3, [pc, #268]	; (800042c <fsm_run+0x2e0>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4618      	mov	r0, r3
 8000322:	f000 ffc5 	bl	80012b0 <setTimer2>
			set_road2_buffer(green_time);
 8000326:	4b41      	ldr	r3, [pc, #260]	; (800042c <fsm_run+0x2e0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fc08 	bl	8000b40 <set_road2_buffer>
			state = S4;
 8000330:	4b3c      	ldr	r3, [pc, #240]	; (8000424 <fsm_run+0x2d8>)
 8000332:	2204      	movs	r2, #4
 8000334:	701a      	strb	r2, [r3, #0]
		}

		//Mode_button is pressed -> turn to RED_ADJUST
		if(is_mode_select_button_pressed()){
 8000336:	f000 fa21 	bl	800077c <is_mode_select_button_pressed>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	f000 8142 	beq.w	80005c6 <fsm_run+0x47a>
			state = RED_ADJUST;
 8000342:	4b38      	ldr	r3, [pc, #224]	; (8000424 <fsm_run+0x2d8>)
 8000344:	220b      	movs	r2, #11
 8000346:	701a      	strb	r2, [r3, #0]
			update_buffer_manual(2, temp_red_time);
 8000348:	4b3a      	ldr	r3, [pc, #232]	; (8000434 <fsm_run+0x2e8>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4619      	mov	r1, r3
 800034e:	2002      	movs	r0, #2
 8000350:	f000 fd9c 	bl	8000e8c <update_buffer_manual>
			setTimer5(250);
 8000354:	20fa      	movs	r0, #250	; 0xfa
 8000356:	f000 fff3 	bl	8001340 <setTimer5>
			//reset all button flag
			is_time_adjust_button_pressed();
 800035a:	f000 fa21 	bl	80007a0 <is_time_adjust_button_pressed>
			is_set_button_pressed();
 800035e:	f000 fa43 	bl	80007e8 <is_set_button_pressed>
		}
		break;
 8000362:	e130      	b.n	80005c6 <fsm_run+0x47a>
	case S4:
		red1_on();
 8000364:	f000 fa68 	bl	8000838 <red1_on>
		green2_on();
 8000368:	f000 fa92 	bl	8000890 <green2_on>
		sevenSegAuto();
 800036c:	f000 fc12 	bl	8000b94 <sevenSegAuto>
		updateBufferAuto();
 8000370:	f000 fcb8 	bl	8000ce4 <updateBufferAuto>

		//road2 timeout -> turn to S5
		if(timer2_flag == 1){
 8000374:	4b31      	ldr	r3, [pc, #196]	; (800043c <fsm_run+0x2f0>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d10c      	bne.n	8000396 <fsm_run+0x24a>
			setTimer2(yellow_time);
 800037c:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <fsm_run+0x2dc>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4618      	mov	r0, r3
 8000382:	f000 ff95 	bl	80012b0 <setTimer2>
			set_road2_buffer(yellow_time);
 8000386:	4b28      	ldr	r3, [pc, #160]	; (8000428 <fsm_run+0x2dc>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fbd8 	bl	8000b40 <set_road2_buffer>
			state = S5;
 8000390:	4b24      	ldr	r3, [pc, #144]	; (8000424 <fsm_run+0x2d8>)
 8000392:	2205      	movs	r2, #5
 8000394:	701a      	strb	r2, [r3, #0]
		}

		//Mode_button is pressed -> turn to RED_ADJUST
		if(is_mode_select_button_pressed()){
 8000396:	f000 f9f1 	bl	800077c <is_mode_select_button_pressed>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	f000 8114 	beq.w	80005ca <fsm_run+0x47e>
			state = RED_ADJUST;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <fsm_run+0x2d8>)
 80003a4:	220b      	movs	r2, #11
 80003a6:	701a      	strb	r2, [r3, #0]
			update_buffer_manual(2, temp_red_time);
 80003a8:	4b22      	ldr	r3, [pc, #136]	; (8000434 <fsm_run+0x2e8>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	2002      	movs	r0, #2
 80003b0:	f000 fd6c 	bl	8000e8c <update_buffer_manual>
			setTimer5(250);
 80003b4:	20fa      	movs	r0, #250	; 0xfa
 80003b6:	f000 ffc3 	bl	8001340 <setTimer5>
			//reset all button flag
			is_time_adjust_button_pressed();
 80003ba:	f000 f9f1 	bl	80007a0 <is_time_adjust_button_pressed>
			is_set_button_pressed();
 80003be:	f000 fa13 	bl	80007e8 <is_set_button_pressed>
		}
		break;
 80003c2:	e102      	b.n	80005ca <fsm_run+0x47e>
	case S5:
		red1_on();
 80003c4:	f000 fa38 	bl	8000838 <red1_on>
		yellow2_on();
 80003c8:	f000 fa8e 	bl	80008e8 <yellow2_on>
		sevenSegAuto();
 80003cc:	f000 fbe2 	bl	8000b94 <sevenSegAuto>
		updateBufferAuto();
 80003d0:	f000 fc88 	bl	8000ce4 <updateBufferAuto>

		//road2 timeout -> turn to S3
		if(timer2_flag == 1){
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <fsm_run+0x2f0>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d10c      	bne.n	80003f6 <fsm_run+0x2aa>
			setTimer2(red_time);
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <fsm_run+0x2e4>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 ff65 	bl	80012b0 <setTimer2>
			set_road2_buffer(red_time);
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <fsm_run+0x2e4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fba8 	bl	8000b40 <set_road2_buffer>
			state = S3;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <fsm_run+0x2d8>)
 80003f2:	2203      	movs	r2, #3
 80003f4:	701a      	strb	r2, [r3, #0]
		}

		//Mode_button is pressed -> turn to RED_ADJUST
		if(is_mode_select_button_pressed()){
 80003f6:	f000 f9c1 	bl	800077c <is_mode_select_button_pressed>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	f000 80e6 	beq.w	80005ce <fsm_run+0x482>
			state = RED_ADJUST;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <fsm_run+0x2d8>)
 8000404:	220b      	movs	r2, #11
 8000406:	701a      	strb	r2, [r3, #0]
			update_buffer_manual(2, temp_red_time);
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <fsm_run+0x2e8>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4619      	mov	r1, r3
 800040e:	2002      	movs	r0, #2
 8000410:	f000 fd3c 	bl	8000e8c <update_buffer_manual>
			setTimer5(250);
 8000414:	20fa      	movs	r0, #250	; 0xfa
 8000416:	f000 ff93 	bl	8001340 <setTimer5>
			//reset all button flag
			is_time_adjust_button_pressed();
 800041a:	f000 f9c1 	bl	80007a0 <is_time_adjust_button_pressed>
			is_set_button_pressed();
 800041e:	f000 f9e3 	bl	80007e8 <is_set_button_pressed>
		}
		break;
 8000422:	e0d4      	b.n	80005ce <fsm_run+0x482>
 8000424:	20000046 	.word	0x20000046
 8000428:	20000008 	.word	0x20000008
 800042c:	20000004 	.word	0x20000004
 8000430:	20000000 	.word	0x20000000
 8000434:	2000000c 	.word	0x2000000c
 8000438:	20000068 	.word	0x20000068
 800043c:	20000070 	.word	0x20000070
	case YELLOW_ADJUST:
		yellow_blink();
 8000440:	f000 fcf8 	bl	8000e34 <yellow_blink>
		sevenSegAuto();
 8000444:	f000 fba6 	bl	8000b94 <sevenSegAuto>

		//when time_button pressed -> increase time by 1
		//when keep pressing -> increase 1 every 1 second
		//range of time is [1-99]
		if(is_time_adjust_button_pressed() || is_time_adjust_button_press1s()){
 8000448:	f000 f9aa 	bl	80007a0 <is_time_adjust_button_pressed>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d104      	bne.n	800045c <fsm_run+0x310>
 8000452:	f000 f9b7 	bl	80007c4 <is_time_adjust_button_press1s>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d013      	beq.n	8000484 <fsm_run+0x338>
			temp_yellow_time = temp_yellow_time% 99000 + 1000;
 800045c:	4b60      	ldr	r3, [pc, #384]	; (80005e0 <fsm_run+0x494>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	4b60      	ldr	r3, [pc, #384]	; (80005e4 <fsm_run+0x498>)
 8000462:	fba3 1302 	umull	r1, r3, r3, r2
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	495f      	ldr	r1, [pc, #380]	; (80005e8 <fsm_run+0x49c>)
 800046a:	fb01 f303 	mul.w	r3, r1, r3
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000474:	4a5a      	ldr	r2, [pc, #360]	; (80005e0 <fsm_run+0x494>)
 8000476:	6013      	str	r3, [r2, #0]
			update_buffer_manual(3, temp_yellow_time);
 8000478:	4b59      	ldr	r3, [pc, #356]	; (80005e0 <fsm_run+0x494>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4619      	mov	r1, r3
 800047e:	2003      	movs	r0, #3
 8000480:	f000 fd04 	bl	8000e8c <update_buffer_manual>
		}

		//set_button is pressed -> save temp value
		if(is_set_button_pressed()){
 8000484:	f000 f9b0 	bl	80007e8 <is_set_button_pressed>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d003      	beq.n	8000496 <fsm_run+0x34a>
			yellow_time = temp_yellow_time;
 800048e:	4b54      	ldr	r3, [pc, #336]	; (80005e0 <fsm_run+0x494>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a56      	ldr	r2, [pc, #344]	; (80005ec <fsm_run+0x4a0>)
 8000494:	6013      	str	r3, [r2, #0]
		}

		//Mode_button is pressed -> turn to GREEN_ADJUST
		if(is_mode_select_button_pressed()){
 8000496:	f000 f971 	bl	800077c <is_mode_select_button_pressed>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	f000 8098 	beq.w	80005d2 <fsm_run+0x486>
			state = GREEN_ADJUST;
 80004a2:	4b53      	ldr	r3, [pc, #332]	; (80005f0 <fsm_run+0x4a4>)
 80004a4:	220d      	movs	r2, #13
 80004a6:	701a      	strb	r2, [r3, #0]
			update_buffer_manual(4, temp_green_time);
 80004a8:	4b52      	ldr	r3, [pc, #328]	; (80005f4 <fsm_run+0x4a8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4619      	mov	r1, r3
 80004ae:	2004      	movs	r0, #4
 80004b0:	f000 fcec 	bl	8000e8c <update_buffer_manual>
			setTimer5(250);
 80004b4:	20fa      	movs	r0, #250	; 0xfa
 80004b6:	f000 ff43 	bl	8001340 <setTimer5>
			//reset all button flag
			is_time_adjust_button_pressed();
 80004ba:	f000 f971 	bl	80007a0 <is_time_adjust_button_pressed>
			is_set_button_pressed();
 80004be:	f000 f993 	bl	80007e8 <is_set_button_pressed>
		}
		break;
 80004c2:	e086      	b.n	80005d2 <fsm_run+0x486>
	case GREEN_ADJUST:
		green_blink();
 80004c4:	f000 fc8a 	bl	8000ddc <green_blink>
		sevenSegAuto();
 80004c8:	f000 fb64 	bl	8000b94 <sevenSegAuto>

		//when time_button pressed -> increase time by 1
		//when keep pressing -> increase 1 every 1 second
		//range of time is [1-99]
		if(is_time_adjust_button_pressed() || is_time_adjust_button_press1s()){
 80004cc:	f000 f968 	bl	80007a0 <is_time_adjust_button_pressed>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d104      	bne.n	80004e0 <fsm_run+0x394>
 80004d6:	f000 f975 	bl	80007c4 <is_time_adjust_button_press1s>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d013      	beq.n	8000508 <fsm_run+0x3bc>
			temp_green_time = temp_green_time% 99000 + 1000;
 80004e0:	4b44      	ldr	r3, [pc, #272]	; (80005f4 <fsm_run+0x4a8>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b3f      	ldr	r3, [pc, #252]	; (80005e4 <fsm_run+0x498>)
 80004e6:	fba3 1302 	umull	r1, r3, r3, r2
 80004ea:	0c1b      	lsrs	r3, r3, #16
 80004ec:	493e      	ldr	r1, [pc, #248]	; (80005e8 <fsm_run+0x49c>)
 80004ee:	fb01 f303 	mul.w	r3, r1, r3
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80004f8:	4a3e      	ldr	r2, [pc, #248]	; (80005f4 <fsm_run+0x4a8>)
 80004fa:	6013      	str	r3, [r2, #0]
			update_buffer_manual(4, temp_green_time);
 80004fc:	4b3d      	ldr	r3, [pc, #244]	; (80005f4 <fsm_run+0x4a8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4619      	mov	r1, r3
 8000502:	2004      	movs	r0, #4
 8000504:	f000 fcc2 	bl	8000e8c <update_buffer_manual>
		}

		//set_button is pressed -> save temp value
		if(is_set_button_pressed()){
 8000508:	f000 f96e 	bl	80007e8 <is_set_button_pressed>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d003      	beq.n	800051a <fsm_run+0x3ce>
			green_time = temp_green_time;
 8000512:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <fsm_run+0x4a8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a38      	ldr	r2, [pc, #224]	; (80005f8 <fsm_run+0x4ac>)
 8000518:	6013      	str	r3, [r2, #0]
		}

		//Mode_button is pressed -> turn to INIT
		if(is_mode_select_button_pressed()){
 800051a:	f000 f92f 	bl	800077c <is_mode_select_button_pressed>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d058      	beq.n	80005d6 <fsm_run+0x48a>
			state = INIT;
 8000524:	4b32      	ldr	r3, [pc, #200]	; (80005f0 <fsm_run+0x4a4>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
			//reset all button flag
			is_time_adjust_button_pressed();
 800052a:	f000 f939 	bl	80007a0 <is_time_adjust_button_pressed>
			is_set_button_pressed();
 800052e:	f000 f95b 	bl	80007e8 <is_set_button_pressed>
		}
		break;
 8000532:	e050      	b.n	80005d6 <fsm_run+0x48a>
	case RED_ADJUST:
		red_blink();
 8000534:	f000 fc26 	bl	8000d84 <red_blink>
		sevenSegAuto();
 8000538:	f000 fb2c 	bl	8000b94 <sevenSegAuto>

		//when time_button pressed -> increase time by 1
		//when keep pressing -> increase 1 every 1 second
		//range of time is [1-99]
		if(is_time_adjust_button_pressed() || is_time_adjust_button_press1s()){
 800053c:	f000 f930 	bl	80007a0 <is_time_adjust_button_pressed>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d104      	bne.n	8000550 <fsm_run+0x404>
 8000546:	f000 f93d 	bl	80007c4 <is_time_adjust_button_press1s>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d013      	beq.n	8000578 <fsm_run+0x42c>
			temp_red_time = temp_red_time% 99000 + 1000;
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <fsm_run+0x4b0>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <fsm_run+0x498>)
 8000556:	fba3 1302 	umull	r1, r3, r3, r2
 800055a:	0c1b      	lsrs	r3, r3, #16
 800055c:	4922      	ldr	r1, [pc, #136]	; (80005e8 <fsm_run+0x49c>)
 800055e:	fb01 f303 	mul.w	r3, r1, r3
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000568:	4a24      	ldr	r2, [pc, #144]	; (80005fc <fsm_run+0x4b0>)
 800056a:	6013      	str	r3, [r2, #0]
			update_buffer_manual(2, temp_red_time);
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <fsm_run+0x4b0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	2002      	movs	r0, #2
 8000574:	f000 fc8a 	bl	8000e8c <update_buffer_manual>
		}
		//set_button is pressed -> save temp value
		if(is_set_button_pressed()){
 8000578:	f000 f936 	bl	80007e8 <is_set_button_pressed>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d003      	beq.n	800058a <fsm_run+0x43e>
			red_time = temp_red_time;
 8000582:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <fsm_run+0x4b0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <fsm_run+0x4b4>)
 8000588:	6013      	str	r3, [r2, #0]
		}

		//Mode_button is pressed -> turn to YELLOW_ADJUST
		if(is_mode_select_button_pressed()){
 800058a:	f000 f8f7 	bl	800077c <is_mode_select_button_pressed>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d022      	beq.n	80005da <fsm_run+0x48e>
			state = YELLOW_ADJUST;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <fsm_run+0x4a4>)
 8000596:	220c      	movs	r2, #12
 8000598:	701a      	strb	r2, [r3, #0]
			update_buffer_manual(3, temp_yellow_time);
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <fsm_run+0x494>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 fc73 	bl	8000e8c <update_buffer_manual>
			setTimer5(250);
 80005a6:	20fa      	movs	r0, #250	; 0xfa
 80005a8:	f000 feca 	bl	8001340 <setTimer5>
			//reset all button flag
			is_time_adjust_button_pressed();
 80005ac:	f000 f8f8 	bl	80007a0 <is_time_adjust_button_pressed>
			is_set_button_pressed();
 80005b0:	f000 f91a 	bl	80007e8 <is_set_button_pressed>
		}
		break;
 80005b4:	e011      	b.n	80005da <fsm_run+0x48e>
	default:
		break;
 80005b6:	bf00      	nop
 80005b8:	e010      	b.n	80005dc <fsm_run+0x490>
			break;
 80005ba:	bf00      	nop
 80005bc:	e00e      	b.n	80005dc <fsm_run+0x490>
		break;
 80005be:	bf00      	nop
 80005c0:	e00c      	b.n	80005dc <fsm_run+0x490>
		break;
 80005c2:	bf00      	nop
 80005c4:	e00a      	b.n	80005dc <fsm_run+0x490>
		break;
 80005c6:	bf00      	nop
 80005c8:	e008      	b.n	80005dc <fsm_run+0x490>
		break;
 80005ca:	bf00      	nop
 80005cc:	e006      	b.n	80005dc <fsm_run+0x490>
		break;
 80005ce:	bf00      	nop
 80005d0:	e004      	b.n	80005dc <fsm_run+0x490>
		break;
 80005d2:	bf00      	nop
 80005d4:	e002      	b.n	80005dc <fsm_run+0x490>
		break;
 80005d6:	bf00      	nop
 80005d8:	e000      	b.n	80005dc <fsm_run+0x490>
		break;
 80005da:	bf00      	nop
	}
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000014 	.word	0x20000014
 80005e4:	a977820f 	.word	0xa977820f
 80005e8:	000182b8 	.word	0x000182b8
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000046 	.word	0x20000046
 80005f4:	20000010 	.word	0x20000010
 80005f8:	20000004 	.word	0x20000004
 80005fc:	2000000c 	.word	0x2000000c
 8000600:	20000000 	.word	0x20000000

08000604 <button_reading>:
//we define counter for the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

//read 3 button and modify flag buffer when button is pressed
//this function is called in timer interupt
void button_reading(){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	e09b      	b.n	8000748 <button_reading+0x144>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000610:	4a52      	ldr	r2, [pc, #328]	; (800075c <button_reading+0x158>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	7819      	ldrb	r1, [r3, #0]
 8000618:	4a51      	ldr	r2, [pc, #324]	; (8000760 <button_reading+0x15c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	460a      	mov	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000622:	4a50      	ldr	r2, [pc, #320]	; (8000764 <button_reading+0x160>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4413      	add	r3, r2
 8000628:	7819      	ldrb	r1, [r3, #0]
 800062a:	4a4c      	ldr	r2, [pc, #304]	; (800075c <button_reading+0x158>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	701a      	strb	r2, [r3, #0]
		//read raw button to buffer0
		if(i == 0){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10c      	bne.n	8000654 <button_reading+0x50>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(Mode_select_button_GPIO_Port, Mode_select_button_Pin);
 800063a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063e:	484a      	ldr	r0, [pc, #296]	; (8000768 <button_reading+0x164>)
 8000640:	f001 fa1c 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	4619      	mov	r1, r3
 8000648:	4a46      	ldr	r2, [pc, #280]	; (8000764 <button_reading+0x160>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	460a      	mov	r2, r1
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	e01e      	b.n	8000692 <button_reading+0x8e>
		}
		else if(i == 1){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d10c      	bne.n	8000674 <button_reading+0x70>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(Time_adjust_button_GPIO_Port, Time_adjust_button_Pin);
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	4842      	ldr	r0, [pc, #264]	; (8000768 <button_reading+0x164>)
 8000660:	f001 fa0c 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	4619      	mov	r1, r3
 8000668:	4a3e      	ldr	r2, [pc, #248]	; (8000764 <button_reading+0x160>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	460a      	mov	r2, r1
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e00e      	b.n	8000692 <button_reading+0x8e>
		}
		else if(i == 2){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b02      	cmp	r3, #2
 8000678:	d10b      	bne.n	8000692 <button_reading+0x8e>
			debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(Set_button_GPIO_Port, Set_button_Pin);
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	483a      	ldr	r0, [pc, #232]	; (8000768 <button_reading+0x164>)
 8000680:	f001 f9fc 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	4619      	mov	r1, r3
 8000688:	4a36      	ldr	r2, [pc, #216]	; (8000764 <button_reading+0x160>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	460a      	mov	r2, r1
 8000690:	701a      	strb	r2, [r3, #0]
		}

		//if input is stable: 3 recently input is equal
		if(debounceButtonBuffer0[i] == debounceButtonBuffer1[i] &&
 8000692:	4a34      	ldr	r2, [pc, #208]	; (8000764 <button_reading+0x160>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	4930      	ldr	r1, [pc, #192]	; (800075c <button_reading+0x158>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	440b      	add	r3, r1
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d14d      	bne.n	8000742 <button_reading+0x13e>
				debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <button_reading+0x158>)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	492c      	ldr	r1, [pc, #176]	; (8000760 <button_reading+0x15c>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	440b      	add	r3, r1
 80006b4:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer0[i] == debounceButtonBuffer1[i] &&
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d143      	bne.n	8000742 <button_reading+0x13e>
			//if input stable at present different from previous
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 80006ba:	4a2c      	ldr	r2, [pc, #176]	; (800076c <button_reading+0x168>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	4927      	ldr	r1, [pc, #156]	; (8000760 <button_reading+0x15c>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	440b      	add	r3, r1
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d019      	beq.n	8000702 <button_reading+0xfe>
				//update input to buffer
				buttonBuffer[i] = debounceButtonBuffer2[i];
 80006ce:	4a24      	ldr	r2, [pc, #144]	; (8000760 <button_reading+0x15c>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	7819      	ldrb	r1, [r3, #0]
 80006d6:	4a25      	ldr	r2, [pc, #148]	; (800076c <button_reading+0x168>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	460a      	mov	r2, r1
 80006de:	701a      	strb	r2, [r3, #0]
				//if input is pressed
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <button_reading+0x168>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d12a      	bne.n	8000742 <button_reading+0x13e>
					//turn flag on
					flagForButtonPress[i] = 1;
 80006ec:	4a20      	ldr	r2, [pc, #128]	; (8000770 <button_reading+0x16c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
					//set counter
					counterForButtonPress1s[i] = DURATION_FOR_PRESSED;
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <button_reading+0x170>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2164      	movs	r1, #100	; 0x64
 80006fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000700:	e01f      	b.n	8000742 <button_reading+0x13e>
				}
			}
			//if input is stable and no change (present = previous)
			else{
				//decrease counter
				counterForButtonPress1s[i]--;
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <button_reading+0x170>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800070a:	3b01      	subs	r3, #1
 800070c:	b299      	uxth	r1, r3
 800070e:	4a19      	ldr	r2, [pc, #100]	; (8000774 <button_reading+0x170>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				//when counter is 0, reset counter
				//and if button is press -> turn flag1s on
				if(counterForButtonPress1s[i] == 0){
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <button_reading+0x170>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10f      	bne.n	8000742 <button_reading+0x13e>
					if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <button_reading+0x168>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d104      	bne.n	8000738 <button_reading+0x134>
						flagForButtonPress1s[i] = 1;
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <button_reading+0x174>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
					}
					counterForButtonPress1s[i] = DURATION_FOR_PRESSED;
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <button_reading+0x170>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2164      	movs	r1, #100	; 0x64
 800073e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b02      	cmp	r3, #2
 800074c:	f77f af60 	ble.w	8000610 <button_reading+0xc>
				}
			}
		}
	}
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000050 	.word	0x20000050
 8000760:	20000054 	.word	0x20000054
 8000764:	2000004c 	.word	0x2000004c
 8000768:	40011000 	.word	0x40011000
 800076c:	20000048 	.word	0x20000048
 8000770:	2000005c 	.word	0x2000005c
 8000774:	20000060 	.word	0x20000060
 8000778:	20000058 	.word	0x20000058

0800077c <is_mode_select_button_pressed>:

//this function check if Mode_select_button is pressed or not
//and reset its flag
int is_mode_select_button_pressed()
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	if(flagForButtonPress[0] == 1){
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <is_mode_select_button_pressed+0x20>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d104      	bne.n	8000792 <is_mode_select_button_pressed+0x16>
		flagForButtonPress[0] = 0;
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <is_mode_select_button_pressed+0x20>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
		return 1;
 800078e:	2301      	movs	r3, #1
 8000790:	e000      	b.n	8000794 <is_mode_select_button_pressed+0x18>
	}
	return 0;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	2000005c 	.word	0x2000005c

080007a0 <is_time_adjust_button_pressed>:

//this fuction check if time_adjust_button is pressed or not
//and reset its flag
int is_time_adjust_button_pressed()
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	if(flagForButtonPress[1] == 1){
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <is_time_adjust_button_pressed+0x20>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d104      	bne.n	80007b6 <is_time_adjust_button_pressed+0x16>
		flagForButtonPress[1] = 0;
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <is_time_adjust_button_pressed+0x20>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	705a      	strb	r2, [r3, #1]
		return 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e000      	b.n	80007b8 <is_time_adjust_button_pressed+0x18>
	}
	return 0;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	2000005c 	.word	0x2000005c

080007c4 <is_time_adjust_button_press1s>:

//this function check if time_adjust_button is keep pressed
//for 1 second and reset its flag
int is_time_adjust_button_press1s()
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	if(flagForButtonPress1s[1] == 1){
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <is_time_adjust_button_press1s+0x20>)
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d104      	bne.n	80007da <is_time_adjust_button_press1s+0x16>
		flagForButtonPress1s[1] = 0;
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <is_time_adjust_button_press1s+0x20>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	705a      	strb	r2, [r3, #1]
		return 1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e000      	b.n	80007dc <is_time_adjust_button_press1s+0x18>
	}
	return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	20000058 	.word	0x20000058

080007e8 <is_set_button_pressed>:

//this function check if set_button is pressed or not
//and reset its flag
int is_set_button_pressed()
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	if(flagForButtonPress[2] == 1){
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <is_set_button_pressed+0x20>)
 80007ee:	789b      	ldrb	r3, [r3, #2]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d104      	bne.n	80007fe <is_set_button_pressed+0x16>
		flagForButtonPress[2] = 0;
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <is_set_button_pressed+0x20>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	709a      	strb	r2, [r3, #2]
		return 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <is_set_button_pressed+0x18>
	}
	return 0;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	2000005c 	.word	0x2000005c

0800080c <green1_on>:
 */
#include "led_display.h"

//turn green led on road1 on
void green1_on()
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2110      	movs	r1, #16
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <green1_on+0x28>)
 8000816:	f001 f948 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2120      	movs	r1, #32
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <green1_on+0x28>)
 8000820:	f001 f943 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2108      	movs	r1, #8
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <green1_on+0x28>)
 800082a:	f001 f93e 	bl	8001aaa <HAL_GPIO_WritePin>
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010c00 	.word	0x40010c00

08000838 <red1_on>:

//turn red led on road 1 on
void red1_on()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	4807      	ldr	r0, [pc, #28]	; (8000860 <red1_on+0x28>)
 8000842:	f001 f932 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2120      	movs	r1, #32
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <red1_on+0x28>)
 800084c:	f001 f92d 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2108      	movs	r1, #8
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <red1_on+0x28>)
 8000856:	f001 f928 	bl	8001aaa <HAL_GPIO_WritePin>
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40010c00 	.word	0x40010c00

08000864 <yellow1_on>:

//turn yellow led on road 1 on
void yellow1_on()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2110      	movs	r1, #16
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <yellow1_on+0x28>)
 800086e:	f001 f91c 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <yellow1_on+0x28>)
 8000878:	f001 f917 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2108      	movs	r1, #8
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <yellow1_on+0x28>)
 8000882:	f001 f912 	bl	8001aaa <HAL_GPIO_WritePin>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40010c00 	.word	0x40010c00

08000890 <green2_on>:

//turn green led on road 2 on
void green2_on()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	4807      	ldr	r0, [pc, #28]	; (80008b8 <green2_on+0x28>)
 800089a:	f001 f906 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <green2_on+0x28>)
 80008a6:	f001 f900 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2140      	movs	r1, #64	; 0x40
 80008ae:	4802      	ldr	r0, [pc, #8]	; (80008b8 <green2_on+0x28>)
 80008b0:	f001 f8fb 	bl	8001aaa <HAL_GPIO_WritePin>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40010c00 	.word	0x40010c00

080008bc <red2_on>:

//turn red led on road 2 on
void red2_on()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <red2_on+0x28>)
 80008c6:	f001 f8f0 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <red2_on+0x28>)
 80008d2:	f001 f8ea 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2140      	movs	r1, #64	; 0x40
 80008da:	4802      	ldr	r0, [pc, #8]	; (80008e4 <red2_on+0x28>)
 80008dc:	f001 f8e5 	bl	8001aaa <HAL_GPIO_WritePin>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40010c00 	.word	0x40010c00

080008e8 <yellow2_on>:

//turn yellow led on road 2 on
void yellow2_on()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <yellow2_on+0x28>)
 80008f2:	f001 f8da 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <yellow2_on+0x28>)
 80008fe:	f001 f8d4 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <yellow2_on+0x28>)
 8000908:	f001 f8cf 	bl	8001aaa <HAL_GPIO_WritePin>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40010c00 	.word	0x40010c00

08000914 <display7SEG>:

//display num to 7seg led
//a to g equal to SEG0 to SEG6
void display7SEG(int num)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	if(num==0 || num==2 || num==3 || num==5 || num==6
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d014      	beq.n	800094c <display7SEG+0x38>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d011      	beq.n	800094c <display7SEG+0x38>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d00e      	beq.n	800094c <display7SEG+0x38>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b05      	cmp	r3, #5
 8000932:	d00b      	beq.n	800094c <display7SEG+0x38>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b06      	cmp	r3, #6
 8000938:	d008      	beq.n	800094c <display7SEG+0x38>
			|| num==7 || num==8 || num==9){
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b07      	cmp	r3, #7
 800093e:	d005      	beq.n	800094c <display7SEG+0x38>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b08      	cmp	r3, #8
 8000944:	d002      	beq.n	800094c <display7SEG+0x38>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b09      	cmp	r3, #9
 800094a:	d105      	bne.n	8000958 <display7SEG+0x44>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2101      	movs	r1, #1
 8000950:	4865      	ldr	r0, [pc, #404]	; (8000ae8 <display7SEG+0x1d4>)
 8000952:	f001 f8aa 	bl	8001aaa <HAL_GPIO_WritePin>
 8000956:	e004      	b.n	8000962 <display7SEG+0x4e>
	}
	else HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4862      	ldr	r0, [pc, #392]	; (8000ae8 <display7SEG+0x1d4>)
 800095e:	f001 f8a4 	bl	8001aaa <HAL_GPIO_WritePin>

	if(num==0 || num==1 || num==2 || num==3 || num==4
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d014      	beq.n	8000992 <display7SEG+0x7e>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d011      	beq.n	8000992 <display7SEG+0x7e>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d00e      	beq.n	8000992 <display7SEG+0x7e>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d00b      	beq.n	8000992 <display7SEG+0x7e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b04      	cmp	r3, #4
 800097e:	d008      	beq.n	8000992 <display7SEG+0x7e>
		|| num==7 || num==8 || num==9){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b07      	cmp	r3, #7
 8000984:	d005      	beq.n	8000992 <display7SEG+0x7e>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b08      	cmp	r3, #8
 800098a:	d002      	beq.n	8000992 <display7SEG+0x7e>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b09      	cmp	r3, #9
 8000990:	d105      	bne.n	800099e <display7SEG+0x8a>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2102      	movs	r1, #2
 8000996:	4854      	ldr	r0, [pc, #336]	; (8000ae8 <display7SEG+0x1d4>)
 8000998:	f001 f887 	bl	8001aaa <HAL_GPIO_WritePin>
 800099c:	e004      	b.n	80009a8 <display7SEG+0x94>
	}
	else HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2102      	movs	r1, #2
 80009a2:	4851      	ldr	r0, [pc, #324]	; (8000ae8 <display7SEG+0x1d4>)
 80009a4:	f001 f881 	bl	8001aaa <HAL_GPIO_WritePin>

	if(num==0 || num==1 || num==3 || num==4 || num==5 || num==6
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d017      	beq.n	80009de <display7SEG+0xca>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d014      	beq.n	80009de <display7SEG+0xca>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	d011      	beq.n	80009de <display7SEG+0xca>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d00e      	beq.n	80009de <display7SEG+0xca>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b05      	cmp	r3, #5
 80009c4:	d00b      	beq.n	80009de <display7SEG+0xca>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b06      	cmp	r3, #6
 80009ca:	d008      	beq.n	80009de <display7SEG+0xca>
			|| num==7 || num==8 || num==9){
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b07      	cmp	r3, #7
 80009d0:	d005      	beq.n	80009de <display7SEG+0xca>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b08      	cmp	r3, #8
 80009d6:	d002      	beq.n	80009de <display7SEG+0xca>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b09      	cmp	r3, #9
 80009dc:	d105      	bne.n	80009ea <display7SEG+0xd6>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2104      	movs	r1, #4
 80009e2:	4841      	ldr	r0, [pc, #260]	; (8000ae8 <display7SEG+0x1d4>)
 80009e4:	f001 f861 	bl	8001aaa <HAL_GPIO_WritePin>
 80009e8:	e004      	b.n	80009f4 <display7SEG+0xe0>
	}
	else HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2104      	movs	r1, #4
 80009ee:	483e      	ldr	r0, [pc, #248]	; (8000ae8 <display7SEG+0x1d4>)
 80009f0:	f001 f85b 	bl	8001aaa <HAL_GPIO_WritePin>

	if(num==0 || num==2 || num==3 || num==5 || num==6 || num==8 ||num==9){
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d011      	beq.n	8000a1e <display7SEG+0x10a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d00e      	beq.n	8000a1e <display7SEG+0x10a>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d00b      	beq.n	8000a1e <display7SEG+0x10a>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b05      	cmp	r3, #5
 8000a0a:	d008      	beq.n	8000a1e <display7SEG+0x10a>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d005      	beq.n	8000a1e <display7SEG+0x10a>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b08      	cmp	r3, #8
 8000a16:	d002      	beq.n	8000a1e <display7SEG+0x10a>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b09      	cmp	r3, #9
 8000a1c:	d105      	bne.n	8000a2a <display7SEG+0x116>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2108      	movs	r1, #8
 8000a22:	4831      	ldr	r0, [pc, #196]	; (8000ae8 <display7SEG+0x1d4>)
 8000a24:	f001 f841 	bl	8001aaa <HAL_GPIO_WritePin>
 8000a28:	e004      	b.n	8000a34 <display7SEG+0x120>
	}
	else HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	482e      	ldr	r0, [pc, #184]	; (8000ae8 <display7SEG+0x1d4>)
 8000a30:	f001 f83b 	bl	8001aaa <HAL_GPIO_WritePin>

	if(num==0 || num==2 || num==6 || num==8){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d008      	beq.n	8000a4c <display7SEG+0x138>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d005      	beq.n	8000a4c <display7SEG+0x138>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d002      	beq.n	8000a4c <display7SEG+0x138>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d105      	bne.n	8000a58 <display7SEG+0x144>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2110      	movs	r1, #16
 8000a50:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <display7SEG+0x1d4>)
 8000a52:	f001 f82a 	bl	8001aaa <HAL_GPIO_WritePin>
 8000a56:	e004      	b.n	8000a62 <display7SEG+0x14e>
	}
	else HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <display7SEG+0x1d4>)
 8000a5e:	f001 f824 	bl	8001aaa <HAL_GPIO_WritePin>

	if(num==0 || num==4 || num==5 || num==6 || num==8 ||num==9){
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00e      	beq.n	8000a86 <display7SEG+0x172>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d00b      	beq.n	8000a86 <display7SEG+0x172>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b05      	cmp	r3, #5
 8000a72:	d008      	beq.n	8000a86 <display7SEG+0x172>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d005      	beq.n	8000a86 <display7SEG+0x172>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b08      	cmp	r3, #8
 8000a7e:	d002      	beq.n	8000a86 <display7SEG+0x172>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b09      	cmp	r3, #9
 8000a84:	d105      	bne.n	8000a92 <display7SEG+0x17e>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2120      	movs	r1, #32
 8000a8a:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <display7SEG+0x1d4>)
 8000a8c:	f001 f80d 	bl	8001aaa <HAL_GPIO_WritePin>
 8000a90:	e004      	b.n	8000a9c <display7SEG+0x188>
	}
	else HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2120      	movs	r1, #32
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <display7SEG+0x1d4>)
 8000a98:	f001 f807 	bl	8001aaa <HAL_GPIO_WritePin>

	if(num==2 || num==3 || num==4 || num==5 || num==6 || num==8 || num==9){
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d011      	beq.n	8000ac6 <display7SEG+0x1b2>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d00e      	beq.n	8000ac6 <display7SEG+0x1b2>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	d00b      	beq.n	8000ac6 <display7SEG+0x1b2>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	d008      	beq.n	8000ac6 <display7SEG+0x1b2>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d005      	beq.n	8000ac6 <display7SEG+0x1b2>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b08      	cmp	r3, #8
 8000abe:	d002      	beq.n	8000ac6 <display7SEG+0x1b2>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b09      	cmp	r3, #9
 8000ac4:	d105      	bne.n	8000ad2 <display7SEG+0x1be>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <display7SEG+0x1d4>)
 8000acc:	f000 ffed 	bl	8001aaa <HAL_GPIO_WritePin>
 8000ad0:	e005      	b.n	8000ade <display7SEG+0x1ca>
	}
	else HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <display7SEG+0x1d4>)
 8000ad8:	f000 ffe7 	bl	8001aaa <HAL_GPIO_WritePin>

}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010800 	.word	0x40010800

08000aec <set_road1_buffer>:


void set_road1_buffer(uint32_t time)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	uint32_t real_time = time/1000;		//time(ms), real_time(s)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <set_road1_buffer+0x48>)
 8000af8:	fba2 2303 	umull	r2, r3, r2, r3
 8000afc:	099b      	lsrs	r3, r3, #6
 8000afe:	60fb      	str	r3, [r7, #12]
	road1_buffer[0] = real_time/10;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <set_road1_buffer+0x4c>)
 8000b04:	fba2 2303 	umull	r2, r3, r2, r3
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <set_road1_buffer+0x50>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	road1_buffer[1] = real_time%10;
 8000b10:	68f9      	ldr	r1, [r7, #12]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <set_road1_buffer+0x4c>)
 8000b14:	fba3 2301 	umull	r2, r3, r3, r1
 8000b18:	08da      	lsrs	r2, r3, #3
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	1aca      	subs	r2, r1, r3
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <set_road1_buffer+0x50>)
 8000b28:	705a      	strb	r2, [r3, #1]
}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	10624dd3 	.word	0x10624dd3
 8000b38:	cccccccd 	.word	0xcccccccd
 8000b3c:	20000040 	.word	0x20000040

08000b40 <set_road2_buffer>:

void set_road2_buffer(uint32_t time)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	uint32_t real_time = time/1000;		//time(ms), real_time(s)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <set_road2_buffer+0x48>)
 8000b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b50:	099b      	lsrs	r3, r3, #6
 8000b52:	60fb      	str	r3, [r7, #12]
	road2_buffer[0] = real_time/10;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <set_road2_buffer+0x4c>)
 8000b58:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <set_road2_buffer+0x50>)
 8000b62:	701a      	strb	r2, [r3, #0]
	road2_buffer[1] = real_time%10;
 8000b64:	68f9      	ldr	r1, [r7, #12]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <set_road2_buffer+0x4c>)
 8000b68:	fba3 2301 	umull	r2, r3, r3, r1
 8000b6c:	08da      	lsrs	r2, r3, #3
 8000b6e:	4613      	mov	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	1aca      	subs	r2, r1, r3
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <set_road2_buffer+0x50>)
 8000b7c:	705a      	strb	r2, [r3, #1]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	10624dd3 	.word	0x10624dd3
 8000b8c:	cccccccd 	.word	0xcccccccd
 8000b90:	20000044 	.word	0x20000044

08000b94 <sevenSegAuto>:

//this function is used to scanning 7seg led automatically
void sevenSegAuto()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	//timer3 is used to scanning led
	if(timer3_flag == 1){
 8000b98:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <sevenSegAuto+0x13c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10f      	bne.n	8000bc0 <sevenSegAuto+0x2c>
		//change which led is turn on, range 0->3
		led_scanning = (led_scanning + 1) % 4;
 8000ba0:	4b4c      	ldr	r3, [pc, #304]	; (8000cd4 <sevenSegAuto+0x140>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	425a      	negs	r2, r3
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	f002 0203 	and.w	r2, r2, #3
 8000bb0:	bf58      	it	pl
 8000bb2:	4253      	negpl	r3, r2
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <sevenSegAuto+0x140>)
 8000bb8:	701a      	strb	r2, [r3, #0]
		setTimer3(SCANNING_TIME);
 8000bba:	20fa      	movs	r0, #250	; 0xfa
 8000bbc:	f000 fb90 	bl	80012e0 <setTimer3>
	}

	switch(led_scanning)
 8000bc0:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <sevenSegAuto+0x140>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d87f      	bhi.n	8000cc8 <sevenSegAuto+0x134>
 8000bc8:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <sevenSegAuto+0x3c>)
 8000bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bce:	bf00      	nop
 8000bd0:	08000be1 	.word	0x08000be1
 8000bd4:	08000c1b 	.word	0x08000c1b
 8000bd8:	08000c55 	.word	0x08000c55
 8000bdc:	08000c8f 	.word	0x08000c8f
	{
	//case n -> led n turned on
	//road1 buffer -> led 0 and 1
	//road2 buffer -> led 2 and 3
	case 0:
		display7SEG(road1_buffer[0]);
 8000be0:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <sevenSegAuto+0x144>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe95 	bl	8000914 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	483b      	ldr	r0, [pc, #236]	; (8000cdc <sevenSegAuto+0x148>)
 8000bf0:	f000 ff5b 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	4838      	ldr	r0, [pc, #224]	; (8000cdc <sevenSegAuto+0x148>)
 8000bfc:	f000 ff55 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c06:	4835      	ldr	r0, [pc, #212]	; (8000cdc <sevenSegAuto+0x148>)
 8000c08:	f000 ff4f 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c12:	4832      	ldr	r0, [pc, #200]	; (8000cdc <sevenSegAuto+0x148>)
 8000c14:	f000 ff49 	bl	8001aaa <HAL_GPIO_WritePin>
		break;
 8000c18:	e057      	b.n	8000cca <sevenSegAuto+0x136>
	case 1:
		display7SEG(road1_buffer[1]);
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <sevenSegAuto+0x144>)
 8000c1c:	785b      	ldrb	r3, [r3, #1]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe78 	bl	8000914 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	482c      	ldr	r0, [pc, #176]	; (8000cdc <sevenSegAuto+0x148>)
 8000c2a:	f000 ff3e 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c34:	4829      	ldr	r0, [pc, #164]	; (8000cdc <sevenSegAuto+0x148>)
 8000c36:	f000 ff38 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c40:	4826      	ldr	r0, [pc, #152]	; (8000cdc <sevenSegAuto+0x148>)
 8000c42:	f000 ff32 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4c:	4823      	ldr	r0, [pc, #140]	; (8000cdc <sevenSegAuto+0x148>)
 8000c4e:	f000 ff2c 	bl	8001aaa <HAL_GPIO_WritePin>
		break;
 8000c52:	e03a      	b.n	8000cca <sevenSegAuto+0x136>
	case 2:
		display7SEG(road2_buffer[0]);
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <sevenSegAuto+0x14c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fe5b 	bl	8000914 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <sevenSegAuto+0x148>)
 8000c64:	f000 ff21 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6e:	481b      	ldr	r0, [pc, #108]	; (8000cdc <sevenSegAuto+0x148>)
 8000c70:	f000 ff1b 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c7a:	4818      	ldr	r0, [pc, #96]	; (8000cdc <sevenSegAuto+0x148>)
 8000c7c:	f000 ff15 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c86:	4815      	ldr	r0, [pc, #84]	; (8000cdc <sevenSegAuto+0x148>)
 8000c88:	f000 ff0f 	bl	8001aaa <HAL_GPIO_WritePin>
		break;
 8000c8c:	e01d      	b.n	8000cca <sevenSegAuto+0x136>
	case 3:
		display7SEG(road2_buffer[1]);
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <sevenSegAuto+0x14c>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fe3e 	bl	8000914 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <sevenSegAuto+0x148>)
 8000c9e:	f000 ff04 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <sevenSegAuto+0x148>)
 8000caa:	f000 fefe 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <sevenSegAuto+0x148>)
 8000cb6:	f000 fef8 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc0:	4806      	ldr	r0, [pc, #24]	; (8000cdc <sevenSegAuto+0x148>)
 8000cc2:	f000 fef2 	bl	8001aaa <HAL_GPIO_WritePin>
		break;
 8000cc6:	e000      	b.n	8000cca <sevenSegAuto+0x136>
	default:
		break;
 8000cc8:	bf00      	nop
	}
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000078 	.word	0x20000078
 8000cd4:	20000047 	.word	0x20000047
 8000cd8:	20000040 	.word	0x20000040
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	20000044 	.word	0x20000044

08000ce4 <updateBufferAuto>:

//Auto count down every 1 second
//and change the buffer
//timer4 is used to check every 1 second
void updateBufferAuto()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	if(timer4_flag == 1){
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <updateBufferAuto+0x68>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d12b      	bne.n	8000d48 <updateBufferAuto+0x64>
		setTimer4(1000);
 8000cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf4:	f000 fb0c 	bl	8001310 <setTimer4>
		//decrease time in buffer by 1
		if(road1_buffer[1] == 0){
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <updateBufferAuto+0x6c>)
 8000cfa:	785b      	ldrb	r3, [r3, #1]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d109      	bne.n	8000d14 <updateBufferAuto+0x30>
			road1_buffer[1] = 9;
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <updateBufferAuto+0x6c>)
 8000d02:	2209      	movs	r2, #9
 8000d04:	705a      	strb	r2, [r3, #1]
			road1_buffer[0]--;
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <updateBufferAuto+0x6c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <updateBufferAuto+0x6c>)
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e005      	b.n	8000d20 <updateBufferAuto+0x3c>
		}
		else road1_buffer[1]--;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <updateBufferAuto+0x6c>)
 8000d16:	785b      	ldrb	r3, [r3, #1]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <updateBufferAuto+0x6c>)
 8000d1e:	705a      	strb	r2, [r3, #1]


		if(road2_buffer[1] == 0){
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <updateBufferAuto+0x70>)
 8000d22:	785b      	ldrb	r3, [r3, #1]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d109      	bne.n	8000d3c <updateBufferAuto+0x58>
			road2_buffer[1] = 9;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <updateBufferAuto+0x70>)
 8000d2a:	2209      	movs	r2, #9
 8000d2c:	705a      	strb	r2, [r3, #1]
			road2_buffer[0]--;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <updateBufferAuto+0x70>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <updateBufferAuto+0x70>)
 8000d38:	701a      	strb	r2, [r3, #0]
		}
		else road2_buffer[1]--;
	}
}
 8000d3a:	e005      	b.n	8000d48 <updateBufferAuto+0x64>
		else road2_buffer[1]--;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <updateBufferAuto+0x70>)
 8000d3e:	785b      	ldrb	r3, [r3, #1]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <updateBufferAuto+0x70>)
 8000d46:	705a      	strb	r2, [r3, #1]
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000080 	.word	0x20000080
 8000d50:	20000040 	.word	0x20000040
 8000d54:	20000044 	.word	0x20000044

08000d58 <update_buffer_when_error>:

//all buffer is set to 8 and remain unchange
void update_buffer_when_error()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	road1_buffer[0] = 8;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <update_buffer_when_error+0x24>)
 8000d5e:	2208      	movs	r2, #8
 8000d60:	701a      	strb	r2, [r3, #0]
	road1_buffer[1] = 8;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <update_buffer_when_error+0x24>)
 8000d64:	2208      	movs	r2, #8
 8000d66:	705a      	strb	r2, [r3, #1]
	road2_buffer[0] = 8;
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <update_buffer_when_error+0x28>)
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	701a      	strb	r2, [r3, #0]
	road2_buffer[1] = 8;
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <update_buffer_when_error+0x28>)
 8000d70:	2208      	movs	r2, #8
 8000d72:	705a      	strb	r2, [r3, #1]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	20000040 	.word	0x20000040
 8000d80:	20000044 	.word	0x20000044

08000d84 <red_blink>:

//blink all red led with f = 2Hz
//make use of timer 5
void red_blink()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <red_blink+0x50>)
 8000d8e:	f000 fe8c 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <red_blink+0x50>)
 8000d98:	f000 fe87 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2120      	movs	r1, #32
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <red_blink+0x50>)
 8000da2:	f000 fe82 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <red_blink+0x50>)
 8000dae:	f000 fe7c 	bl	8001aaa <HAL_GPIO_WritePin>
	if(timer5_flag == 1){
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <red_blink+0x54>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d10a      	bne.n	8000dd0 <red_blink+0x4c>
		HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8000dba:	2108      	movs	r1, #8
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <red_blink+0x50>)
 8000dbe:	f000 fe8c 	bl	8001ada <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8000dc2:	2140      	movs	r1, #64	; 0x40
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <red_blink+0x50>)
 8000dc6:	f000 fe88 	bl	8001ada <HAL_GPIO_TogglePin>
		setTimer5(250);
 8000dca:	20fa      	movs	r0, #250	; 0xfa
 8000dcc:	f000 fab8 	bl	8001340 <setTimer5>
	}
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	20000088 	.word	0x20000088

08000ddc <green_blink>:

//blink all green led with f = 2Hz
//make use of timer5
void green_blink()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2108      	movs	r1, #8
 8000de4:	4811      	ldr	r0, [pc, #68]	; (8000e2c <green_blink+0x50>)
 8000de6:	f000 fe60 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	480f      	ldr	r0, [pc, #60]	; (8000e2c <green_blink+0x50>)
 8000df0:	f000 fe5b 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2120      	movs	r1, #32
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <green_blink+0x50>)
 8000dfa:	f000 fe56 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <green_blink+0x50>)
 8000e06:	f000 fe50 	bl	8001aaa <HAL_GPIO_WritePin>
	if(timer5_flag == 1){
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <green_blink+0x54>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d10a      	bne.n	8000e28 <green_blink+0x4c>
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8000e12:	2110      	movs	r1, #16
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <green_blink+0x50>)
 8000e16:	f000 fe60 	bl	8001ada <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <green_blink+0x50>)
 8000e1e:	f000 fe5c 	bl	8001ada <HAL_GPIO_TogglePin>
		setTimer5(250);
 8000e22:	20fa      	movs	r0, #250	; 0xfa
 8000e24:	f000 fa8c 	bl	8001340 <setTimer5>
	}
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010c00 	.word	0x40010c00
 8000e30:	20000088 	.word	0x20000088

08000e34 <yellow_blink>:

//blink all yellow led with f = 2Hz
//make use of timer5
void yellow_blink()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4811      	ldr	r0, [pc, #68]	; (8000e84 <yellow_blink+0x50>)
 8000e3e:	f000 fe34 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	480f      	ldr	r0, [pc, #60]	; (8000e84 <yellow_blink+0x50>)
 8000e48:	f000 fe2f 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2108      	movs	r1, #8
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <yellow_blink+0x50>)
 8000e52:	f000 fe2a 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	480a      	ldr	r0, [pc, #40]	; (8000e84 <yellow_blink+0x50>)
 8000e5c:	f000 fe25 	bl	8001aaa <HAL_GPIO_WritePin>
	if(timer5_flag == 1){
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <yellow_blink+0x54>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d10b      	bne.n	8000e80 <yellow_blink+0x4c>
		HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8000e68:	2120      	movs	r1, #32
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <yellow_blink+0x50>)
 8000e6c:	f000 fe35 	bl	8001ada <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8000e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <yellow_blink+0x50>)
 8000e76:	f000 fe30 	bl	8001ada <HAL_GPIO_TogglePin>
		setTimer5(250);
 8000e7a:	20fa      	movs	r0, #250	; 0xfa
 8000e7c:	f000 fa60 	bl	8001340 <setTimer5>
	}
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010c00 	.word	0x40010c00
 8000e88:	20000088 	.word	0x20000088

08000e8c <update_buffer_manual>:

//2 seven seg led on road 1 display time
//		....	     road 2 display mode
//this function is called in 3 manual state in fsm
void update_buffer_manual(uint8_t mode, uint32_t time)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
	uint32_t real_time = time/1000;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <update_buffer_manual+0x58>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	099b      	lsrs	r3, r3, #6
 8000ea2:	60fb      	str	r3, [r7, #12]

	road1_buffer[0] = 0;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <update_buffer_manual+0x5c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
	road1_buffer[1] = mode;
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <update_buffer_manual+0x5c>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	7053      	strb	r3, [r2, #1]

	road2_buffer[0] = real_time/10;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <update_buffer_manual+0x60>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	08db      	lsrs	r3, r3, #3
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <update_buffer_manual+0x64>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	road2_buffer[1] = real_time%10;
 8000ec0:	68f9      	ldr	r1, [r7, #12]
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <update_buffer_manual+0x60>)
 8000ec4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	1aca      	subs	r2, r1, r3
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <update_buffer_manual+0x64>)
 8000ed8:	705a      	strb	r2, [r3, #1]
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	10624dd3 	.word	0x10624dd3
 8000ee8:	20000040 	.word	0x20000040
 8000eec:	cccccccd 	.word	0xcccccccd
 8000ef0:	20000044 	.word	0x20000044

08000ef4 <turn_all_led_on>:
//use when error occur
void turn_all_led_on()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, RED1_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2108      	movs	r1, #8
 8000efc:	480f      	ldr	r0, [pc, #60]	; (8000f3c <turn_all_led_on+0x48>)
 8000efe:	f000 fdd4 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN1_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2110      	movs	r1, #16
 8000f06:	480d      	ldr	r0, [pc, #52]	; (8000f3c <turn_all_led_on+0x48>)
 8000f08:	f000 fdcf 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, YELLOW1_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2120      	movs	r1, #32
 8000f10:	480a      	ldr	r0, [pc, #40]	; (8000f3c <turn_all_led_on+0x48>)
 8000f12:	f000 fdca 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED2_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2140      	movs	r1, #64	; 0x40
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <turn_all_led_on+0x48>)
 8000f1c:	f000 fdc5 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN2_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2180      	movs	r1, #128	; 0x80
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <turn_all_led_on+0x48>)
 8000f26:	f000 fdc0 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, YELLOW2_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <turn_all_led_on+0x48>)
 8000f32:	f000 fdba 	bl	8001aaa <HAL_GPIO_WritePin>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f000 fab0 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f80c 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 f892 	bl	8001074 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f50:	f000 f844 	bl	8000fdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <main+0x20>)
 8000f56:	f001 fa11 	bl	800237c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_run();
 8000f5a:	f7ff f8f7 	bl	800014c <fsm_run>
 8000f5e:	e7fc      	b.n	8000f5a <main+0x1a>
 8000f60:	20000090 	.word	0x20000090

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b090      	sub	sp, #64	; 0x40
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	2228      	movs	r2, #40	; 0x28
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fdba 	bl	8002aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fdb6 	bl	8001b0c <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fa6:	f000 f8d7 	bl	8001158 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 f822 	bl	800200c <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fce:	f000 f8c3 	bl	8001158 <Error_Handler>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3740      	adds	r7, #64	; 0x40
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_TIM2_Init+0x94>)
 8000ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_TIM2_Init+0x94>)
 8001002:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001006:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_TIM2_Init+0x94>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_TIM2_Init+0x94>)
 8001010:	2209      	movs	r2, #9
 8001012:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_TIM2_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_TIM2_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001020:	4813      	ldr	r0, [pc, #76]	; (8001070 <MX_TIM2_Init+0x94>)
 8001022:	f001 f95b 	bl	80022dc <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800102c:	f000 f894 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001034:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4619      	mov	r1, r3
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <MX_TIM2_Init+0x94>)
 800103e:	f001 faf1 	bl	8002624 <HAL_TIM_ConfigClockSource>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001048:	f000 f886 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_TIM2_Init+0x94>)
 800105a:	f001 fcb9 	bl	80029d0 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001064:	f000 f878 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000090 	.word	0x20000090

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <MX_GPIO_Init+0xd4>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a2e      	ldr	r2, [pc, #184]	; (8001148 <MX_GPIO_Init+0xd4>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <MX_GPIO_Init+0xd4>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <MX_GPIO_Init+0xd4>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a28      	ldr	r2, [pc, #160]	; (8001148 <MX_GPIO_Init+0xd4>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_GPIO_Init+0xd4>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <MX_GPIO_Init+0xd4>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <MX_GPIO_Init+0xd4>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <MX_GPIO_Init+0xd4>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, a_Pin|b_Pin|c_Pin|d_Pin
 80010d0:	2200      	movs	r2, #0
 80010d2:	f242 71ff 	movw	r1, #10239	; 0x27ff
 80010d6:	481d      	ldr	r0, [pc, #116]	; (800114c <MX_GPIO_Init+0xd8>)
 80010d8:	f000 fce7 	bl	8001aaa <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <MX_GPIO_Init+0xdc>)
 80010e4:	f000 fce1 	bl	8001aaa <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Mode_select_button_Pin Time_adjust_button_Pin Set_button_Pin */
  GPIO_InitStruct.Pin = Mode_select_button_Pin|Time_adjust_button_Pin|Set_button_Pin;
 80010e8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	4815      	ldr	r0, [pc, #84]	; (8001154 <MX_GPIO_Init+0xe0>)
 80010fe:	f000 fb43 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin PA13 */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8001102:	f242 73ff 	movw	r3, #10239	; 0x27ff
 8001106:	613b      	str	r3, [r7, #16]
                          |e_Pin|f_Pin|g_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2302      	movs	r3, #2
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4619      	mov	r1, r3
 800111a:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_GPIO_Init+0xd8>)
 800111c:	f000 fb34 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8001120:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001124:	613b      	str	r3, [r7, #16]
                          |GREEN2_Pin|YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2302      	movs	r3, #2
 8001130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_GPIO_Init+0xdc>)
 800113a:	f000 fb25 	bl	8001788 <HAL_GPIO_Init>

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40010800 	.word	0x40010800
 8001150:	40010c00 	.word	0x40010c00
 8001154:	40011000 	.word	0x40011000

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_MspInit+0x5c>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_MspInit+0x5c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_MspInit+0x5c>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x5c>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_MspInit+0x5c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_MspInit+0x5c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_MspInit+0x60>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_MspInit+0x60>)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000

080011c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d8:	d113      	bne.n	8001202 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_TIM_Base_MspInit+0x44>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_TIM_Base_MspInit+0x44>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_TIM_Base_MspInit+0x44>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	201c      	movs	r0, #28
 80011f8:	f000 fa8f 	bl	800171a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011fc:	201c      	movs	r0, #28
 80011fe:	f000 faa8 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001256:	f000 f96d 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <TIM2_IRQHandler+0x10>)
 8001266:	f001 f8d5 	bl	8002414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000090 	.word	0x20000090

08001274 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <setTimer1>:
int timer4_counter = 0;

int timer5_flag = 0;
int timer5_counter = 0;

void setTimer1(uint32_t duration){
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001288:	230a      	movs	r3, #10
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001292:	461a      	mov	r2, r3
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <setTimer1+0x28>)
 8001296:	601a      	str	r2, [r3, #0]
	timer1_flag = 0;
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <setTimer1+0x2c>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	2000006c 	.word	0x2000006c
 80012ac:	20000068 	.word	0x20000068

080012b0 <setTimer2>:

void setTimer2(uint32_t duration){
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 80012b8:	230a      	movs	r3, #10
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	fbb3 f3f2 	udiv	r3, r3, r2
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <setTimer2+0x28>)
 80012c6:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <setTimer2+0x2c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	20000074 	.word	0x20000074
 80012dc:	20000070 	.word	0x20000070

080012e0 <setTimer3>:

void setTimer3(uint32_t duration){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 80012e8:	230a      	movs	r3, #10
 80012ea:	461a      	mov	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <setTimer3+0x28>)
 80012f6:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <setTimer3+0x2c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	2000007c 	.word	0x2000007c
 800130c:	20000078 	.word	0x20000078

08001310 <setTimer4>:

void setTimer4(uint32_t duration){
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8001318:	230a      	movs	r3, #10
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001322:	461a      	mov	r2, r3
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <setTimer4+0x28>)
 8001326:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <setTimer4+0x2c>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	20000084 	.word	0x20000084
 800133c:	20000080 	.word	0x20000080

08001340 <setTimer5>:

void setTimer5(uint32_t duration){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TIMER_CYCLE;
 8001348:	230a      	movs	r3, #10
 800134a:	461a      	mov	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001352:	461a      	mov	r2, r3
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <setTimer5+0x28>)
 8001356:	601a      	str	r2, [r3, #0]
	timer5_flag = 0;
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <setTimer5+0x2c>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	2000008c 	.word	0x2000008c
 800136c:	20000088 	.word	0x20000088

08001370 <timerRun>:

void timerRun(){
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	if(timer1_counter >0){
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <timerRun+0xac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	dd0b      	ble.n	8001394 <timerRun+0x24>
		timer1_counter--;
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <timerRun+0xac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3b01      	subs	r3, #1
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <timerRun+0xac>)
 8001384:	6013      	str	r3, [r2, #0]
		if(timer1_counter <=0){
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <timerRun+0xac>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	dc02      	bgt.n	8001394 <timerRun+0x24>
			timer1_flag =1;
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <timerRun+0xb0>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter >0){
 8001394:	4b23      	ldr	r3, [pc, #140]	; (8001424 <timerRun+0xb4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	dd0b      	ble.n	80013b4 <timerRun+0x44>
			timer2_counter--;
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <timerRun+0xb4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4a20      	ldr	r2, [pc, #128]	; (8001424 <timerRun+0xb4>)
 80013a4:	6013      	str	r3, [r2, #0]
			if(timer2_counter <=0){
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <timerRun+0xb4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dc02      	bgt.n	80013b4 <timerRun+0x44>
				timer2_flag =1;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <timerRun+0xb8>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer3_counter >0){
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <timerRun+0xbc>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dd0b      	ble.n	80013d4 <timerRun+0x64>
			timer3_counter--;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <timerRun+0xbc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	4a1a      	ldr	r2, [pc, #104]	; (800142c <timerRun+0xbc>)
 80013c4:	6013      	str	r3, [r2, #0]
			if(timer3_counter <=0){
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <timerRun+0xbc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dc02      	bgt.n	80013d4 <timerRun+0x64>
				timer3_flag =1;
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <timerRun+0xc0>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer4_counter >0){
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <timerRun+0xc4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dd0b      	ble.n	80013f4 <timerRun+0x84>
			timer4_counter--;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <timerRun+0xc4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a14      	ldr	r2, [pc, #80]	; (8001434 <timerRun+0xc4>)
 80013e4:	6013      	str	r3, [r2, #0]
			if(timer4_counter <=0){
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <timerRun+0xc4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dc02      	bgt.n	80013f4 <timerRun+0x84>
				timer4_flag =1;
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <timerRun+0xc8>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer5_counter >0){
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <timerRun+0xcc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	dd0b      	ble.n	8001414 <timerRun+0xa4>
				timer5_counter--;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <timerRun+0xcc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3b01      	subs	r3, #1
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <timerRun+0xcc>)
 8001404:	6013      	str	r3, [r2, #0]
				if(timer5_counter <=0){
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <timerRun+0xcc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	dc02      	bgt.n	8001414 <timerRun+0xa4>
					timer5_flag =1;
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <timerRun+0xd0>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
				}
			}
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	2000006c 	.word	0x2000006c
 8001420:	20000068 	.word	0x20000068
 8001424:	20000074 	.word	0x20000074
 8001428:	20000070 	.word	0x20000070
 800142c:	2000007c 	.word	0x2000007c
 8001430:	20000078 	.word	0x20000078
 8001434:	20000084 	.word	0x20000084
 8001438:	20000080 	.word	0x20000080
 800143c:	2000008c 	.word	0x2000008c
 8001440:	20000088 	.word	0x20000088

08001444 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
		button_reading();
 800144c:	f7ff f8da 	bl	8000604 <button_reading>
		timerRun();
 8001450:	f7ff ff8e 	bl	8001370 <timerRun>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	; (8001494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	; (80014a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001482:	f7ff fef7 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001486:	f001 fb0d 	bl	8002aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148a:	f7ff fd59 	bl	8000f40 <main>
  bx lr
 800148e:	4770      	bx	lr
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001498:	08002b3c 	.word	0x08002b3c
  ldr r2, =_sbss
 800149c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80014a0:	200000dc 	.word	0x200000dc

080014a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_2_IRQHandler>
	...

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x28>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x28>)
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f923 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	200f      	movs	r0, #15
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fe4e 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f93b 	bl	800176e <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 f903 	bl	800171a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000018 	.word	0x20000018
 800152c:	20000020 	.word	0x20000020
 8001530:	2000001c 	.word	0x2000001c

08001534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x1c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_IncTick+0x20>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <HAL_IncTick+0x20>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000020 	.word	0x20000020
 8001554:	200000d8 	.word	0x200000d8

08001558 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <HAL_GetTick+0x10>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	200000d8 	.word	0x200000d8

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4906      	ldr	r1, [pc, #24]	; (8001604 <__NVIC_EnableIRQ+0x34>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff90 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff2d 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff42 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff90 	bl	800165c <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5f 	bl	8001608 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff35 	bl	80015d0 <__NVIC_EnableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffa2 	bl	80016c0 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b08b      	sub	sp, #44	; 0x2c
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179a:	e148      	b.n	8001a2e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800179c:	2201      	movs	r2, #1
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 8137 	bne.w	8001a28 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4aa3      	ldr	r2, [pc, #652]	; (8001a4c <HAL_GPIO_Init+0x2c4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d05e      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017c4:	4aa1      	ldr	r2, [pc, #644]	; (8001a4c <HAL_GPIO_Init+0x2c4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d875      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017ca:	4aa1      	ldr	r2, [pc, #644]	; (8001a50 <HAL_GPIO_Init+0x2c8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d058      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017d0:	4a9f      	ldr	r2, [pc, #636]	; (8001a50 <HAL_GPIO_Init+0x2c8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d86f      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017d6:	4a9f      	ldr	r2, [pc, #636]	; (8001a54 <HAL_GPIO_Init+0x2cc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d052      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017dc:	4a9d      	ldr	r2, [pc, #628]	; (8001a54 <HAL_GPIO_Init+0x2cc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d869      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017e2:	4a9d      	ldr	r2, [pc, #628]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d04c      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017e8:	4a9b      	ldr	r2, [pc, #620]	; (8001a58 <HAL_GPIO_Init+0x2d0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d863      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017ee:	4a9b      	ldr	r2, [pc, #620]	; (8001a5c <HAL_GPIO_Init+0x2d4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d046      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
 80017f4:	4a99      	ldr	r2, [pc, #612]	; (8001a5c <HAL_GPIO_Init+0x2d4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d85d      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 80017fa:	2b12      	cmp	r3, #18
 80017fc:	d82a      	bhi.n	8001854 <HAL_GPIO_Init+0xcc>
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d859      	bhi.n	80018b6 <HAL_GPIO_Init+0x12e>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <HAL_GPIO_Init+0x80>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001883 	.word	0x08001883
 800180c:	0800185d 	.word	0x0800185d
 8001810:	0800186f 	.word	0x0800186f
 8001814:	080018b1 	.word	0x080018b1
 8001818:	080018b7 	.word	0x080018b7
 800181c:	080018b7 	.word	0x080018b7
 8001820:	080018b7 	.word	0x080018b7
 8001824:	080018b7 	.word	0x080018b7
 8001828:	080018b7 	.word	0x080018b7
 800182c:	080018b7 	.word	0x080018b7
 8001830:	080018b7 	.word	0x080018b7
 8001834:	080018b7 	.word	0x080018b7
 8001838:	080018b7 	.word	0x080018b7
 800183c:	080018b7 	.word	0x080018b7
 8001840:	080018b7 	.word	0x080018b7
 8001844:	080018b7 	.word	0x080018b7
 8001848:	080018b7 	.word	0x080018b7
 800184c:	08001865 	.word	0x08001865
 8001850:	08001879 	.word	0x08001879
 8001854:	4a82      	ldr	r2, [pc, #520]	; (8001a60 <HAL_GPIO_Init+0x2d8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800185a:	e02c      	b.n	80018b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e029      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	3304      	adds	r3, #4
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e024      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	3308      	adds	r3, #8
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e01f      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	330c      	adds	r3, #12
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e01a      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800188a:	2304      	movs	r3, #4
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e013      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	611a      	str	r2, [r3, #16]
          break;
 80018a2:	e009      	b.n	80018b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a4:	2308      	movs	r3, #8
 80018a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	615a      	str	r2, [r3, #20]
          break;
 80018ae:	e003      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x130>
          break;
 80018b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2bff      	cmp	r3, #255	; 0xff
 80018bc:	d801      	bhi.n	80018c2 <HAL_GPIO_Init+0x13a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_Init+0x13e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3304      	adds	r3, #4
 80018c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d802      	bhi.n	80018d4 <HAL_GPIO_Init+0x14c>
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x152>
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	3b08      	subs	r3, #8
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	210f      	movs	r1, #15
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	6a39      	ldr	r1, [r7, #32]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8090 	beq.w	8001a28 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001908:	4b56      	ldr	r3, [pc, #344]	; (8001a64 <HAL_GPIO_Init+0x2dc>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a55      	ldr	r2, [pc, #340]	; (8001a64 <HAL_GPIO_Init+0x2dc>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_GPIO_Init+0x2dc>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001920:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <HAL_GPIO_Init+0x2e0>)
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3302      	adds	r3, #2
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a49      	ldr	r2, [pc, #292]	; (8001a6c <HAL_GPIO_Init+0x2e4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d00d      	beq.n	8001968 <HAL_GPIO_Init+0x1e0>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a48      	ldr	r2, [pc, #288]	; (8001a70 <HAL_GPIO_Init+0x2e8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d007      	beq.n	8001964 <HAL_GPIO_Init+0x1dc>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a47      	ldr	r2, [pc, #284]	; (8001a74 <HAL_GPIO_Init+0x2ec>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d101      	bne.n	8001960 <HAL_GPIO_Init+0x1d8>
 800195c:	2302      	movs	r3, #2
 800195e:	e004      	b.n	800196a <HAL_GPIO_Init+0x1e2>
 8001960:	2303      	movs	r3, #3
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x1e2>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_GPIO_Init+0x1e2>
 8001968:	2300      	movs	r3, #0
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	f002 0203 	and.w	r2, r2, #3
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	4093      	lsls	r3, r2
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800197a:	493b      	ldr	r1, [pc, #236]	; (8001a68 <HAL_GPIO_Init+0x2e0>)
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001994:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4937      	ldr	r1, [pc, #220]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4933      	ldr	r1, [pc, #204]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	492d      	ldr	r1, [pc, #180]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	4929      	ldr	r1, [pc, #164]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	4923      	ldr	r1, [pc, #140]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	491f      	ldr	r1, [pc, #124]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	4919      	ldr	r1, [pc, #100]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60cb      	str	r3, [r1, #12]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4915      	ldr	r1, [pc, #84]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f47f aeaf 	bne.w	800179c <HAL_GPIO_Init+0x14>
  }
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	372c      	adds	r7, #44	; 0x2c
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	10320000 	.word	0x10320000
 8001a50:	10310000 	.word	0x10310000
 8001a54:	10220000 	.word	0x10220000
 8001a58:	10210000 	.word	0x10210000
 8001a5c:	10120000 	.word	0x10120000
 8001a60:	10110000 	.word	0x10110000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	e001      	b.n	8001a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	807b      	strh	r3, [r7, #2]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aba:	787b      	ldrb	r3, [r7, #1]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ac6:	e003      	b.n	8001ad0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	041a      	lsls	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aec:	887a      	ldrh	r2, [r7, #2]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4013      	ands	r3, r2
 8001af2:	041a      	lsls	r2, r3, #16
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	400b      	ands	r3, r1
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e26c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8087 	beq.w	8001c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b2c:	4b92      	ldr	r3, [pc, #584]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d00c      	beq.n	8001b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b38:	4b8f      	ldr	r3, [pc, #572]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d112      	bne.n	8001b6a <HAL_RCC_OscConfig+0x5e>
 8001b44:	4b8c      	ldr	r3, [pc, #560]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d10b      	bne.n	8001b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b52:	4b89      	ldr	r3, [pc, #548]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d06c      	beq.n	8001c38 <HAL_RCC_OscConfig+0x12c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d168      	bne.n	8001c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e246      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x76>
 8001b74:	4b80      	ldr	r3, [pc, #512]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a7f      	ldr	r2, [pc, #508]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	e02e      	b.n	8001be0 <HAL_RCC_OscConfig+0xd4>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x98>
 8001b8a:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a7a      	ldr	r2, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a77      	ldr	r2, [pc, #476]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e01d      	b.n	8001be0 <HAL_RCC_OscConfig+0xd4>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xbc>
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a71      	ldr	r2, [pc, #452]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0xd4>
 8001bc8:	4b6b      	ldr	r3, [pc, #428]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a6a      	ldr	r2, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a67      	ldr	r2, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fcb6 	bl	8001558 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fcb2 	bl	8001558 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1fa      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b5d      	ldr	r3, [pc, #372]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xe4>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fca2 	bl	8001558 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fc9e 	bl	8001558 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e1e6      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x10c>
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d063      	beq.n	8001d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c46:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d11c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x18c>
 8001c5e:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d116      	bne.n	8001c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_RCC_OscConfig+0x176>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e1ba      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4939      	ldr	r1, [pc, #228]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	e03a      	b.n	8001d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fc57 	bl	8001558 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff fc53 	bl	8001558 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e19b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4927      	ldr	r1, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
 8001ce0:	e015      	b.n	8001d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fc36 	bl	8001558 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fc32 	bl	8001558 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e17a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d03a      	beq.n	8001d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d019      	beq.n	8001d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7ff fc16 	bl	8001558 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff fc12 	bl	8001558 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e15a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f000 faa6 	bl	80022a0 <RCC_Delay>
 8001d54:	e01c      	b.n	8001d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fbfc 	bl	8001558 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d62:	e00f      	b.n	8001d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7ff fbf8 	bl	8001558 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d908      	bls.n	8001d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e140      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	42420000 	.word	0x42420000
 8001d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	4b9e      	ldr	r3, [pc, #632]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1e9      	bne.n	8001d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a6 	beq.w	8001eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da2:	4b97      	ldr	r3, [pc, #604]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10d      	bne.n	8001dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b94      	ldr	r3, [pc, #592]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a93      	ldr	r2, [pc, #588]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b91      	ldr	r3, [pc, #580]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b8e      	ldr	r3, [pc, #568]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d118      	bne.n	8001e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a8a      	ldr	r2, [pc, #552]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fbb9 	bl	8001558 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7ff fbb5 	bl	8001558 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b64      	cmp	r3, #100	; 0x64
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0fd      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	4b81      	ldr	r3, [pc, #516]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x312>
 8001e10:	4b7b      	ldr	r3, [pc, #492]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	e02d      	b.n	8001e7a <HAL_RCC_OscConfig+0x36e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x334>
 8001e26:	4b76      	ldr	r3, [pc, #472]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a75      	ldr	r2, [pc, #468]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	4b73      	ldr	r3, [pc, #460]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a72      	ldr	r2, [pc, #456]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	e01c      	b.n	8001e7a <HAL_RCC_OscConfig+0x36e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d10c      	bne.n	8001e62 <HAL_RCC_OscConfig+0x356>
 8001e48:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a6c      	ldr	r2, [pc, #432]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4a69      	ldr	r2, [pc, #420]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6213      	str	r3, [r2, #32]
 8001e60:	e00b      	b.n	8001e7a <HAL_RCC_OscConfig+0x36e>
 8001e62:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a66      	ldr	r2, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	4b64      	ldr	r3, [pc, #400]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a63      	ldr	r2, [pc, #396]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d015      	beq.n	8001eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fb69 	bl	8001558 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff fb65 	bl	8001558 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0ab      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <HAL_RCC_OscConfig+0x37e>
 8001eac:	e014      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fb53 	bl	8001558 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fb4f 	bl	8001558 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e095      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ee      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4b48      	ldr	r3, [pc, #288]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a47      	ldr	r2, [pc, #284]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8081 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d061      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d146      	bne.n	8001f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f08:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCC_OscConfig+0x4fc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fb23 	bl	8001558 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f16:	f7ff fb1f 	bl	8001558 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e067      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d108      	bne.n	8001f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	492d      	ldr	r1, [pc, #180]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f50:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a19      	ldr	r1, [r3, #32]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	430b      	orrs	r3, r1
 8001f62:	4927      	ldr	r1, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_RCC_OscConfig+0x4fc>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff faf3 	bl	8001558 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7ff faef 	bl	8001558 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e037      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x46a>
 8001f94:	e02f      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_RCC_OscConfig+0x4fc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fadc 	bl	8001558 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff fad8 	bl	8001558 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e020      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x498>
 8001fc2:	e018      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e013      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
 8002008:	42420060 	.word	0x42420060

0800200c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0d0      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d910      	bls.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b67      	ldr	r3, [pc, #412]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4965      	ldr	r1, [pc, #404]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b63      	ldr	r3, [pc, #396]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b8      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800208a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	494d      	ldr	r1, [pc, #308]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d040      	beq.n	800212c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d115      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e073      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e06b      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ea:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4936      	ldr	r1, [pc, #216]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7ff fa2c 	bl	8001558 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	e00a      	b.n	800211a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7ff fa28 	bl	8001558 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e053      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 020c 	and.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	429a      	cmp	r2, r3
 800212a:	d1eb      	bne.n	8002104 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d210      	bcs.n	800215c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	4922      	ldr	r1, [pc, #136]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e032      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4916      	ldr	r1, [pc, #88]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	490e      	ldr	r1, [pc, #56]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800219a:	f000 f821 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	490a      	ldr	r1, [pc, #40]	; (80021d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	5ccb      	ldrb	r3, [r1, r3]
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1cc>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1d0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f98a 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08002b24 	.word	0x08002b24
 80021d8:	20000018 	.word	0x20000018
 80021dc:	2000001c 	.word	0x2000001c

080021e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	b490      	push	{r4, r7}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021e8:	1d3c      	adds	r4, r7, #4
 80021ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021f0:	f240 2301 	movw	r3, #513	; 0x201
 80021f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x40>
 800221a:	2b08      	cmp	r3, #8
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x46>
 800221e:	e02d      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002222:	623b      	str	r3, [r7, #32]
      break;
 8002224:	e02d      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	0c9b      	lsrs	r3, r3, #18
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002232:	4413      	add	r3, r2
 8002234:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002238:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0c5b      	lsrs	r3, r3, #17
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002252:	4413      	add	r3, r2
 8002254:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002258:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225e:	fb02 f203 	mul.w	r2, r2, r3
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	e004      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	623b      	str	r3, [r7, #32]
      break;
 800227a:	e002      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	623b      	str	r3, [r7, #32]
      break;
 8002280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002282:	6a3b      	ldr	r3, [r7, #32]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bc90      	pop	{r4, r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	08002b14 	.word	0x08002b14
 8002294:	40021000 	.word	0x40021000
 8002298:	007a1200 	.word	0x007a1200
 800229c:	003d0900 	.word	0x003d0900

080022a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <RCC_Delay+0x34>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <RCC_Delay+0x38>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0a5b      	lsrs	r3, r3, #9
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022bc:	bf00      	nop
  }
  while (Delay --);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1e5a      	subs	r2, r3, #1
 80022c2:	60fa      	str	r2, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f9      	bne.n	80022bc <RCC_Delay+0x1c>
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	20000018 	.word	0x20000018
 80022d8:	10624dd3 	.word	0x10624dd3

080022dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e041      	b.n	8002372 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe ff60 	bl	80011c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f000 fa6a 	bl	80027f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d001      	beq.n	8002394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e035      	b.n	8002400 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_TIM_Base_Start_IT+0x90>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_TIM_Base_Start_IT+0x4e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023be:	d004      	beq.n	80023ca <HAL_TIM_Base_Start_IT+0x4e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a12      	ldr	r2, [pc, #72]	; (8002410 <HAL_TIM_Base_Start_IT+0x94>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d111      	bne.n	80023ee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d010      	beq.n	80023fe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ec:	e007      	b.n	80023fe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40000400 	.word	0x40000400

08002414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d122      	bne.n	8002470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b02      	cmp	r3, #2
 8002436:	d11b      	bne.n	8002470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0202 	mvn.w	r2, #2
 8002440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f9b1 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f9a4 	bl	80027ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f9b3 	bl	80027d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b04      	cmp	r3, #4
 800247c:	d122      	bne.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d11b      	bne.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0204 	mvn.w	r2, #4
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f987 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f97a 	bl	80027ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f989 	bl	80027d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0208 	mvn.w	r2, #8
 80024e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f95d 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f950 	bl	80027ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f95f 	bl	80027d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b10      	cmp	r3, #16
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b10      	cmp	r3, #16
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0210 	mvn.w	r2, #16
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2208      	movs	r2, #8
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f933 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f926 	bl	80027ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f935 	bl	80027d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0201 	mvn.w	r2, #1
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe ff56 	bl	8001444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b80      	cmp	r3, #128	; 0x80
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa67 	bl	8002a92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f8f9 	bl	80027e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0220 	mvn.w	r2, #32
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa32 	bl	8002a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_TIM_ConfigClockSource+0x18>
 8002638:	2302      	movs	r3, #2
 800263a:	e0b3      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x180>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800265a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002662:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002674:	d03e      	beq.n	80026f4 <HAL_TIM_ConfigClockSource+0xd0>
 8002676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267a:	f200 8087 	bhi.w	800278c <HAL_TIM_ConfigClockSource+0x168>
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	f000 8085 	beq.w	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268a:	d87f      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 800268c:	2b70      	cmp	r3, #112	; 0x70
 800268e:	d01a      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0xa2>
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d87b      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 8002694:	2b60      	cmp	r3, #96	; 0x60
 8002696:	d050      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x116>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	d877      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 800269c:	2b50      	cmp	r3, #80	; 0x50
 800269e:	d03c      	beq.n	800271a <HAL_TIM_ConfigClockSource+0xf6>
 80026a0:	2b50      	cmp	r3, #80	; 0x50
 80026a2:	d873      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d058      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x136>
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d86f      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 80026ac:	2b30      	cmp	r3, #48	; 0x30
 80026ae:	d064      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x156>
 80026b0:	2b30      	cmp	r3, #48	; 0x30
 80026b2:	d86b      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d060      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x156>
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d867      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d05c      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x156>
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d05a      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026c4:	e062      	b.n	800278c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f000 f95c 	bl	8002992 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	609a      	str	r2, [r3, #8]
      break;
 80026f2:	e04e      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6899      	ldr	r1, [r3, #8]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f000 f945 	bl	8002992 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002716:	609a      	str	r2, [r3, #8]
      break;
 8002718:	e03b      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	461a      	mov	r2, r3
 8002728:	f000 f8bc 	bl	80028a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2150      	movs	r1, #80	; 0x50
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f913 	bl	800295e <TIM_ITRx_SetConfig>
      break;
 8002738:	e02b      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	461a      	mov	r2, r3
 8002748:	f000 f8da 	bl	8002900 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2160      	movs	r1, #96	; 0x60
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f903 	bl	800295e <TIM_ITRx_SetConfig>
      break;
 8002758:	e01b      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	461a      	mov	r2, r3
 8002768:	f000 f89c 	bl	80028a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2140      	movs	r1, #64	; 0x40
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f8f3 	bl	800295e <TIM_ITRx_SetConfig>
      break;
 8002778:	e00b      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f000 f8ea 	bl	800295e <TIM_ITRx_SetConfig>
        break;
 800278a:	e002      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800278c:	bf00      	nop
 800278e:	e000      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002790:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a25      	ldr	r2, [pc, #148]	; (800289c <TIM_Base_SetConfig+0xa8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d007      	beq.n	800281c <TIM_Base_SetConfig+0x28>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002812:	d003      	beq.n	800281c <TIM_Base_SetConfig+0x28>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <TIM_Base_SetConfig+0xac>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d108      	bne.n	800282e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1a      	ldr	r2, [pc, #104]	; (800289c <TIM_Base_SetConfig+0xa8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <TIM_Base_SetConfig+0x52>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d003      	beq.n	8002846 <TIM_Base_SetConfig+0x52>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <TIM_Base_SetConfig+0xac>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d108      	bne.n	8002858 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a07      	ldr	r2, [pc, #28]	; (800289c <TIM_Base_SetConfig+0xa8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d103      	bne.n	800288c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	615a      	str	r2, [r3, #20]
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40012c00 	.word	0x40012c00
 80028a0:	40000400 	.word	0x40000400

080028a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f023 0201 	bic.w	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f023 030a 	bic.w	r3, r3, #10
 80028e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	621a      	str	r2, [r3, #32]
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f023 0210 	bic.w	r2, r3, #16
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800292a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	031b      	lsls	r3, r3, #12
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800293c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	621a      	str	r2, [r3, #32]
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	f043 0307 	orr.w	r3, r3, #7
 8002980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002992:	b480      	push	{r7}
 8002994:	b087      	sub	sp, #28
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	021a      	lsls	r2, r3, #8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	609a      	str	r2, [r3, #8]
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e041      	b.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d009      	beq.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a34:	d004      	beq.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10c      	bne.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40000400 	.word	0x40000400

08002a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <__libc_init_array>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	2600      	movs	r6, #0
 8002aa8:	4d0c      	ldr	r5, [pc, #48]	; (8002adc <__libc_init_array+0x38>)
 8002aaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ae0 <__libc_init_array+0x3c>)
 8002aac:	1b64      	subs	r4, r4, r5
 8002aae:	10a4      	asrs	r4, r4, #2
 8002ab0:	42a6      	cmp	r6, r4
 8002ab2:	d109      	bne.n	8002ac8 <__libc_init_array+0x24>
 8002ab4:	f000 f822 	bl	8002afc <_init>
 8002ab8:	2600      	movs	r6, #0
 8002aba:	4d0a      	ldr	r5, [pc, #40]	; (8002ae4 <__libc_init_array+0x40>)
 8002abc:	4c0a      	ldr	r4, [pc, #40]	; (8002ae8 <__libc_init_array+0x44>)
 8002abe:	1b64      	subs	r4, r4, r5
 8002ac0:	10a4      	asrs	r4, r4, #2
 8002ac2:	42a6      	cmp	r6, r4
 8002ac4:	d105      	bne.n	8002ad2 <__libc_init_array+0x2e>
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}
 8002ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002acc:	4798      	blx	r3
 8002ace:	3601      	adds	r6, #1
 8002ad0:	e7ee      	b.n	8002ab0 <__libc_init_array+0xc>
 8002ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad6:	4798      	blx	r3
 8002ad8:	3601      	adds	r6, #1
 8002ada:	e7f2      	b.n	8002ac2 <__libc_init_array+0x1e>
 8002adc:	08002b34 	.word	0x08002b34
 8002ae0:	08002b34 	.word	0x08002b34
 8002ae4:	08002b34 	.word	0x08002b34
 8002ae8:	08002b38 	.word	0x08002b38

08002aec <memset>:
 8002aec:	4603      	mov	r3, r0
 8002aee:	4402      	add	r2, r0
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d100      	bne.n	8002af6 <memset+0xa>
 8002af4:	4770      	bx	lr
 8002af6:	f803 1b01 	strb.w	r1, [r3], #1
 8002afa:	e7f9      	b.n	8002af0 <memset+0x4>

08002afc <_init>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr

08002b08 <_fini>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	bf00      	nop
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr
